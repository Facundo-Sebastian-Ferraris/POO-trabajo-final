Object subclass: #Cliente	instanceVariableNames: 'apellido dni datosContacto colContratos residencia preferencias dineroReembolso colContratosAtrasados colContratosPagos colContratosRealizados'	classVariableNames: ''	package: 'tpFinal-Modelo'!!Cliente methodsFor: 'constructor' stamp: 'Anonymous 1/11/2024 16:56'!inicializarApellido: unApellido Dni: unDni datosContacto: unosDatos residencia: unaResi colContratos: unaCol preferencias: unasPrefe	colContratosAtrasados  := OrderedCollection new.	colContratosPagos  := OrderedCollection new.	colContratosRealizados := OrderedCollection new.	dineroReembolso := 0.	apellido := unApellido.	dni := unDni.	datosContacto := unosDatos.	residencia := unaResi.	colContratos := unaCol.	preferencias := unasPrefe.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/23/2024 20:50'!getColContratos^colContratos.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/20/2024 17:25'!obtenerContratoRealizado: numeroContrato|unContrato|unContrato:= colContratosRealizados detect:[:unContratoCol | unContratoCol coincideContrato: numeroContrato ] ifNone:[nil].^unContrato .! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/23/2024 20:51'!getColContratosAtrasados^colContratosAtrasados.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/19/2024 12:21'!encontrarContratoPago: numContrato	|exito unNumContrato elContrato|	exito := false.	elContrato := colContratosPagos detect:[:cadaContrato| cadaContrato esIgual: numContrato]  ifNone: 	[nil].		(elContrato isNotNil) ifTrue:[exito := true].	^exito.  ! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/19/2024 12:22'!encontrarContratoRealizado: numContrato	|exito unNumContrato elContrato|	exito := false.	elContrato := colContratosRealizados detect:[:cadaContrato| cadaContrato esIgual: numContrato]  ifNone: 	[nil].		(elContrato isNotNil) ifTrue:[exito := true].	^exito.  ! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/23/2024 20:51'!getColContratosPagos^colContratosPagos.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:16'!cargarContratoCon: unViaje cantPersonas: unaCantPersonas cantCuotas: unasCuotas fechaViaje: unaFechaViaje fechaContrato: unaFechaContrato	|nuevo|	nuevo := Contrato crearFechaContrato:unaFechaContrato  viajeContratado: unViaje fechaDelViaje: unaFechaViaje cantCuotas: unasCuotas cantDePersonas: unaCantPersonas.	(self esViajeroFrecuente) ifTrue:[		nuevo aplicarDescuento: self.		].	colContratos add: nuevo.	colContratos changed.		! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/23/2024 21:03'!retornarColContratos: opcion|coleccion|(opcion = 1) "Contratos en curso"ifTrue:[	coleccion := self getColContratos.	]ifFalse:[	(opcion = 2) "Contratos pagos"	ifTrue:[		coleccion := self getColContratosPagos.				]	ifFalse:[		(opcion = 3) "Contratos realizados"		ifTrue:[			coleccion := self getColContratosRealizados.					]		ifFalse:[ "Contratos atrasados"			(opcion = 4)			ifTrue:[				coleccion := self getColContratosAtrasados.				]						]		]		].^coleccion.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 2/14/2024 23:38'!pagarCuotaCliente: numeroContrato cantidad: cantCuot|rta unContrato|rta := 0.unContrato := self obtenerContrato: numeroContrato .(unContrato isNotNil) ifTrue: [rta:= (unContrato pagarCuotaContrato: cantCuot unCliente: self). colContratos changed.]ifFalse:[rta := 3].^rta.! !!Cliente methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/19/2024 21:28'!cancelarContrato: unContrato	|reembolso|	reembolso := 0.	(unContrato esContratoFlexible) ifTrue: [				reembolso := unContrato cancelar.		(reembolso = -2990)		ifTrue:[reembolso := -1]		ifFalse:[			self setReembolso: reembolso.			colContratos changed.			].	]	ifFalse:[		reembolso := -1.		]	.	^reembolso.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/19/2024 12:21'!encontrarContrato: numContrato	|exito unNumContrato elContrato|	exito := false.	elContrato := colContratos detect:[:cadaContrato| cadaContrato esIgual: numContrato]  ifNone: 	[nil].		(elContrato isNotNil) ifTrue:[exito := true].	^exito.  ! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 2/14/2024 23:36'!cargarContratoCon: unViaje cantPersonas: unaCantPersonas fechaViaje: unaFechaViaje cantCuotas: unasCuotas plus: unPlus fechaContrato: unaFechaContrato	|nuevo|	nuevo := ContratoFlexible crearFechaContrato:unaFechaContrato viajeContratado: unViaje fechaDelViaje: unaFechaViaje cantCuotas: unasCuotas cantDePersonas: unaCantPersonas ConPlus: unPlus.	colContratos add: nuevo.	colContratos changed.		 ! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 2/14/2024 23:37'!modificarFechaViajeCon: unContrato fecha: unaFecha empresa: unaEmpresa opcion: opcion	|exito|		exito := 0.	(unContrato esContratoFlexible ) ifTrue:[		exito:= unContrato modificarCon: unaFecha empresa: unaEmpresa  y: opcion. 			colContratos changed.	].	^exito.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/11/2024 18:52'!agregarContratosPagos: unContrato"Método que elimina al contrato de la colección de contratos, y lo agrega a la colección de contratos pagos"colContratos remove: unContrato.colContratosPagos add: unContrato.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/11/2024 18:52'!agregarContratosRealizados: unContrato"Método que elimina al contrato de la colección de contratos pagos, y lo agrega a la colección de contratos realizados"colContratosPagos remove: unContrato.colContratosRealizados add: unContrato.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 2/15/2024 00:16'!modificarContratos: nombreViaje"Método que borra los viajes de nombre nombreViaje de los contratos del cliente"colContratos do: [ :cont | cont verificarCondiciones: nombreViaje. ].colContratosPagos do: [ :cont | cont verificarCondiciones: nombreViaje.].! !!Cliente methodsFor: 'Contratos' stamp: 'tony 7/30/2023 14:12'!agregarContratosVencidos: unContrato"Método que elimina al contrato de la colección de contratos, y lo agrega a la colección de contratos atrasados"colContratos remove: unContrato.colContratosAtrasados add: unContrato.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/24/2024 12:22'!verificarPagoContrato	|advertido elContrato|	advertido:=false.	elContrato := colContratos detect: [ :cont | cont verificar: self ] ifNone: [nil].	(elContrato isNotNil) ifTrue: [ advertido:=true. ].	^advertido.! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/20/2024 17:25'!obtenerContratoPago: numeroContrato|unContrato|unContrato:= colContratosPagos detect:[:unContratoCol | unContratoCol coincideContrato: numeroContrato ] ifNone:[nil].^unContrato .! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/19/2024 12:21'!encontrarContratoAtrasado: numContrato	|exito unNumContrato elContrato|	exito := false.	elContrato := colContratosAtrasados detect:[:cadaContrato| cadaContrato esIgual: numContrato]  ifNone: 	[nil].		(elContrato isNotNil) ifTrue:[exito := true].	^exito.  ! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 2/10/2024 21:01'!calcularCantContratosOrganizados    "Método que devuelve la cantidad de contratos que posee un cliente."    | cant |    cant := 0.    colContratos do: [ :unCon |        unCon tieneViajeOrganizado ifTrue: [ cant := cant + 1 ] ].    colContratosPagos do: [ :unConP |        unConP tieneViajeOrganizado ifTrue: [ cant := cant + 1 ] ].    ^ cant! !!Cliente methodsFor: 'Contratos' stamp: 'tony 7/31/2023 13:17'!obtenerContrato: numeroContrato|unContrato|unContrato:= colContratos detect:[:unContratoCol | unContratoCol coincideContrato: numeroContrato ] ifNone:[nil].^unContrato .! !!Cliente methodsFor: 'Contratos' stamp: 'Anonymous 1/23/2024 20:51'!getColContratosRealizados^colContratosRealizados.! !!Cliente methodsFor: 'setters' stamp: 'Anonymous 2/11/2024 22:03'!setPreferencias: unasPreferencias	preferencias := unasPreferencias.	self changed.! !!Cliente methodsFor: 'setters' stamp: 'Anonymous 2/11/2024 21:42'!setApellido: unApellidoapellido := unApellido.self changed.! !!Cliente methodsFor: 'setters' stamp: 'Anonymous 2/11/2024 21:42'!setReembolso: uno	dineroReembolso := dineroReembolso + uno.	self changed.! !!Cliente methodsFor: 'setters' stamp: 'Anonymous 2/11/2024 21:42'!setResidencia: unaResidencia	residencia := unaResidencia.self changed.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/18/2024 22:09'!cambiarReembolso: valordineroReembolso := valor.self changed.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 15:55'!tieneContratoConViaje: unViaje	"Método que retorna verdadero si el cliente tiene un contrato con unViaje"	| contrato |	contrato:= colContratos		detect: [ :con | con tieneContratadoViaje: unViaje ]		ifNone: [ nil ].	^ contrato isNotNil! !!Cliente methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 18:33'!obtenerContratosConViaje: unViaje    "Devuelve una colección de contratos que tienen contratado el viaje proporcionado"    | colContratosV |    colContratosV := OrderedCollection new.    colContratosV := colContratos select: [ :con |        con tieneContratadoViaje: unViaje ].    ^ colContratosV.! !!Cliente methodsFor: 'verificación' stamp: 'tony 7/30/2023 14:01'!esViajeroFrecuente	^false.! !!Cliente methodsFor: 'verificación' stamp: 'tony 7/31/2023 13:17'!esIgualDNI:unDni^ unDni = dni .! !!Cliente methodsFor: 'verificación' stamp: 'tony 7/30/2023 14:00'!esIgualCliente: unDni	^dni = unDni.! !!Cliente methodsFor: 'getters' stamp: 'tony 7/30/2023 17:54'!toStringReembolso	'Reembolso: ' , dineroReembolso asString.! !!Cliente methodsFor: 'getters' stamp: 'tony 3/29/2023 10:14'!getApellido^apellido.! !!Cliente methodsFor: 'getters' stamp: 'Anonymous 2/1/2024 20:35'!mostrarEtiqueta |esViajero tipo|  esViajero := self esViajeroFrecuente.    (esViajero)        ifTrue: [ tipo := 'VIAJERO FRECUENTE' ]        ifFalse: [ tipo := 'CLIENTE'].^'Apellido: ' , apellido, '*DNI: ' , dni asString, '*Tipo: ' , tipo asString.! !!Cliente methodsFor: 'getters' stamp: 'tony 3/29/2023 10:19'!getDni^dni.! !!Cliente methodsFor: 'getters' stamp: 'tony 7/30/2023 17:06'!getReembolso	^dineroReembolso.! !!Cliente methodsFor: 'getters' stamp: 'Anonymous 1/26/2024 19:34'!toString^'Cliente ' , apellido, ' DNI: ' , dni asString, ' residencia: ' , residencia asString, ' Preferencias: ' , preferencias asString, ' Dinero reembolso: ' , dineroReembolso asString, ' Datos contacto:', datosContacto asString.! !!Cliente methodsFor: 'Cliente' stamp: 'Anonymous 2/23/2024 11:42'!transformarAViajeroFrecuente	| vF |	vF := ViajeroFrecuente		      crearApellido: apellido		      Dni: dni		      datosContacto: datosContacto		      residencia: residencia		      colContratos: colContratos		      preferencias: preferencias.	vF	"Mantenemos las colecciones de contratos pagos, realizados y atrasados"		establecerColContratosPagos: colContratosPagos		conRealizados: colContratosRealizados		conAtrasados: colContratosAtrasados;		setMillas: dineroReembolso .	self becomeForward: vF.	self changed.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cliente class	instanceVariableNames: ''!!Cliente class methodsFor: 'constructor'!crearApellido: unApellido Dni: unDni datosContacto: unosDatos residencia: unaResi colContratos: unaCol preferencias: unasPrefe	|unCliente|	unCliente := self new.	unCliente inicializarApellido: unApellido Dni: unDni datosContacto: unosDatos residencia: unaResi 	colContratos: unaCol preferencias: unasPrefe.	^unCliente.	! !Object subclass: #Contrato	instanceVariableNames: 'numContrato fechaContrato viajeContratado fechaDelViaje fechaProxVencimiento costoContrato cantCuotas cantDePersonas colExcursiones'	classVariableNames: 'ultimoNro'	package: 'tpFinal-Modelo'!!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/10/2024 21:02'!tieneViajeOrganizado    "Método que retorna un boolean. Si es organizado, retorna true"    | esOrganizado |    esOrganizado := viajeContratado esViajeOrganizado.    ^ esOrganizado! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/15/2024 00:16'!verificarCondiciones: nombreViaje    | exito |	exito := false.	(viajeContratado ) ifNotNil:[    exito := viajeContratado verificarNombre: nombreViaje.	viajeContratado := nil.    	fechaDelViaje := nil. 	].   	! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/14/2024 15:55'!verificar: unCliente     "Método que verifica que devuelve true en caso de que posea fecha cercana a vencimiento (a 7 o menos días)"     | advertido diferencia|     advertido := false.diferencia := (fechaProxVencimiento julianDayNumber) -  (Date today julianDayNumber).        ((diferencia <= 7)and: (diferencia >= 0)) ifTrue: [        		     advertido := true.    		  	].     ^ advertido.! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 1/19/2024 11:58'!esIgual: unNumContrato	"Método que compara dos números de contratos, y devuelve true si son iguales"	^numContrato = unNumContrato. ! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:16'!aplicarDescuento: unViajero"Método que descuenta un 10% del precio del contrato(solo a viajeros frecuentes)"	|millasViaje millasCliente |	Viaje inicializarMillas.	millasViaje := viajeContratado obtenerMillas.millasCliente := unViajero getMillas.			(millasCliente >= millasViaje)ifTrue:[	unViajero restarMillas: millasViaje.	costoContrato := costoContrato - (costoContrato * 10/100).	].! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/9/2024 12:21'!añadirACosto: precio"Método que sirve para aumentar el precio original del contrato ligado al viaje."costoContrato := costoContrato + precio.! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:53'!pagarCuotaContrato: cantCuot unCliente: unCliente|exito esPago rta validez|rta := 0.validez := self contratoValido.(validez) ifTrue:[	exito := (self cuotasValidar: cantCuot).	(exito) ifTrue:[ 		self pagarUnasCuotas: cantCuot.		rta := 1. "se pudieron pagar las cuotas"		esPago := cantCuotas = 0.		(esPago) ifTrue:[			unCliente agregarContratosPagos: self.			fechaProxVencimiento := nil.			rta := 2. "el contrato quedó completamente pago"			].			self changed.	 	].	(exito) 	ifFalse:[		(fechaProxVencimiento <= (Date today)) ifTrue:[			rta := 4. "la fecha de vencimiento ya caducó, contrato atrasado"			unCliente agregarContratosVencidos: self.		]ifFalse:[			rta := 5. "la cant cuotas a pagar ingresadas son mayores a las totales."		]	].]ifFalse:[	rta := 6. "Contrato ya cancelado, no se puede pagar."].^rta.! !!Contrato methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/18/2024 21:05'!pagarUnasCuotas: cantCuot	| cantidad |	cantidad := cantCuot.	cantCuotas := cantCuotas - cantidad.	fechaProxVencimiento := Date today addDays: 30.! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:48'!contratoValido^true.! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 2/15/2024 15:28'!efectivizar: unCliente	|exito esPago|	exito := 0.	esPago := cantCuotas = 0.	(esPago) ifTrue: [				exito := 5. "Contrato totalmente pagado pero no supera la fecha del viaje."		(fechaDelViaje <= (Date today)) ifTrue:[			unCliente agregarContratosRealizados: self.			(unCliente esViajeroFrecuente) ifTrue:[				unCliente sumarMillas: viajeContratado.							].					exito := 1. "Contrato efectivizado, se manda a la colección de contratos realizados por el cliente."			self changed.		].		]		ifFalse:[		exito := 3.		(Date today > fechaDelViaje or: (Date today) > fechaProxVencimiento) ifTrue:[			unCliente agregarContratosVencidos: self.			exito := 	4.		].		].		^exito.	! !!Contrato methodsFor: 'Contratos' stamp: 'tony 7/30/2023 16:23'!esContratoFlexible	^false.! !!Contrato methodsFor: 'Contratos' stamp: 'tony 7/31/2023 13:18'!coincideContrato: numeroContrato^numeroContrato  = numContrato .  ! !!Contrato methodsFor: 'Contratos' stamp: 'Anonymous 1/20/2024 16:42'!cuotasValidar: cantCuot^(cantCuot <= cantCuotas asNumber) and: (fechaProxVencimiento > (Date today)) .! !!Contrato methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 12:02'!inicializarNumContrato: unNum fechaContrato: unaFechaContrato viajeContratado: unViaje fechaDelViaje: unaFechaViaje cantCuotas: unaCantCuotas cantDePersonas: unaCantPersonas	colExcursiones  := OrderedCollection new.	numContrato := unNum.	fechaContrato := unaFechaContrato.	viajeContratado := unViaje.	fechaDelViaje := unaFechaViaje.	cantDePersonas := unaCantPersonas.	cantCuotas := unaCantCuotas.	costoContrato := unViaje calcularPrecio: cantDePersonas.	fechaProxVencimiento := fechaContrato addDays: 30.! !!Contrato methodsFor: 'getters' stamp: 'VictoriaBugli 2/15/2024 16:41'!toString	| cadena viajeNulo verViaje fechaVNula verFecha |	"Verifico que el viaje contratado no sea nulo"	viajeNulo := viajeContratado isNil.	viajeNulo		ifFalse: [ verViaje := viajeContratado mostrarEtiqueta ]		ifTrue: [ verViaje := 'Ninguno.' ].	"Verifico que la fecha del viaje no sea nula"	fechaVNula := fechaDelViaje isNil.	fechaVNula		ifFalse: [ verFecha := fechaDelViaje asString ]		ifTrue: [ verFecha := 'Ninguna.' ].	cadena := 'Contrato: ' , numContrato asString , ' Fecha de origen: '	          , fechaContrato asString , ' Fecha del viaje: '	          , verFecha 	          , ' Cantidad de cuotas sin pagar: ' , cantCuotas asString	          , String crlf , 'Viaje contratado: ' , verViaje	          , String crlf , ' Cantidad de personas: '	          , cantDePersonas asString , String crlf	          , 'Costo del contrato: $' , costoContrato asString	          , String crlf.	colExcursiones isEmpty ifFalse: [		cadena := cadena , ' Excursiones: '		          , self verNombresDeExcursiones asString ].	^ cadena! !!Contrato methodsFor: 'getters' stamp: 'Anonymous 2/1/2024 20:35'!mostrarEtiqueta|esFlex tipo|  esFlex := self esContratoFlexible.    (esFlex)        ifTrue: [ tipo := 'CONTRATO FLEXIBLE' ]        ifFalse: [ tipo := 'CONTRATO'].^ 'Contrato: ' , numContrato asString, '*Fecha de origen: ' , fechaContrato asString, '*Tipo: ' , tipo asString. 	! !!Contrato methodsFor: 'getters'!getNumContrato "Método que devuelve el número del contrato"^numContrato.! !!Contrato methodsFor: 'getters' stamp: 'tony 7/30/2023 14:29'!getViajeContratado	^viajeContratado.! !!Contrato methodsFor: 'Excursion' stamp: 'VictoriaBugli 2/19/2024 18:01'!agregarExcursionContrato: nombreEx cantAAplicar: unaCant	"Método que agrega una excursión al viaje contratado, si es un viaje organizado"	| exito dif diaHoy excursion excursionOp |	exito := 0.	diaHoy := Date today.	dif := fechaDelViaje julianDayNumber - diaHoy julianDayNumber.	dif >= 1		ifTrue: [			(viajeContratado esViajeOrganizado and: unaCant < cantDePersonas)				ifTrue: [ "Busco que exista la excursión dentro del viaje contratado"					excursion := viajeContratado obtenerExcursion: nombreEx.					excursion isNotNil						ifTrue: [							self añadirACosto: excursion getPrecio asNumber.							excursionOp := ExcursionOp								               crearNombreExcursion:								               excursion getNombreExcursion asString								               costo: excursion getPrecio asNumber								               cantPersonas: unaCant.							colExcursiones add: excursionOp.							"Agrego la excursión al contrato"														exito := 1.							"hecho, la excursión se añadió."							self changed ]						ifFalse: [						exito := 4 "La excursión no existe dentro del viaje." ] ]				ifFalse: [					exito := 3 "El viaje no es organizado y/o la cantidad de personas ingresada supera a la máxima por contrato." ] ]		ifFalse: [			exito := 2 "La fecha de hoy es superior a la del viaje, no se puede cambiar." ].	^ exito! !!Contrato methodsFor: 'Excursion' stamp: 'Anonymous 2/9/2024 17:51'!verNombresDeExcursiones|cadena|cadena := ''.colExcursiones do:[:excursion| cadena := cadena, ' ' ,excursion toString asString].^cadena.! !!Contrato methodsFor: 'setters' stamp: 'tony 7/30/2023 16:28'!calcularCon: impuestos y: precioViaje	|elPrecio|	elPrecio := (precioViaje + impuestos ) * cantDePersonas.	^elPrecio.! !!Contrato methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 16:07'!tieneContratadoViaje: unViaje	^viajeContratado esIgual: unViaje! !!Contrato methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 18:11'!modificarPrecioViaje: unViaje	costoContrato := unViaje calcularPrecio: cantDePersonas.		self changed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Contrato class	instanceVariableNames: ''!!Contrato class methodsFor: 'constructor' stamp: 'tony 7/31/2023 10:21'!setNro	ultimoNro := 0.! !!Contrato class methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 12:13'!crearFechaContrato: unaFechaContrato viajeContratado: unViaje fechaDelViaje: unaFechaViaje cantCuotas: unaCantCuotas cantDePersonas: unaCantPersonas	|unContrato unNum|	unContrato := self new.	unNum := Contrato obtenerNro.	unContrato inicializarNumContrato: unNum fechaContrato: unaFechaContrato viajeContratado: unViaje 	fechaDelViaje: unaFechaViaje cantCuotas: unaCantCuotas cantDePersonas: unaCantPersonas.	^unContrato.		! !!Contrato class methodsFor: 'constructor' stamp: 'tony 7/31/2023 10:22'!obtenerNro	|numero|	ultimoNro := ultimoNro +1.	numero := ultimoNro.	^numero.! !Contrato subclass: #ContratoFlexible	instanceVariableNames: 'plus esCancelado'	classVariableNames: ''	package: 'tpFinal-Modelo'!!ContratoFlexible methodsFor: 'constructor'!inicializarConPlus: unPlus	plus := unPlus.	esCancelado := false.! !!ContratoFlexible methodsFor: 'verificación' stamp: 'tony 7/30/2023 16:23'!esContratoFlexible	^true.! !!ContratoFlexible methodsFor: 'verificación' stamp: 'VictoriaBugli 2/18/2024 21:08'!verificar: unCliente|advertido advertencia|     advertencia:=super verificar: unCliente.    advertido := advertencia.    (esCancelado and: advertencia) ifTrue: [ advertido:=false.].    ^advertido.! !!ContratoFlexible methodsFor: 'getters' stamp: 'tony 7/30/2023 17:14'!getEsCancelado	^esCancelado.! !!ContratoFlexible methodsFor: 'getters' stamp: 'Anonymous 2/9/2024 17:53'!toString	|mensaje|	mensaje := super toString.		mensaje := mensaje , String crlf, ' plus: ' , plus asString, ' cancelado? ' , esCancelado asString.				^mensaje.		! !!ContratoFlexible methodsFor: 'setters' stamp: 'tony 7/30/2023 20:15'!setFechaViaje: unaFecha	fechaDelViaje := unaFecha.! !!ContratoFlexible methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:49'!contratoValido	|exito|	exito := super contratoValido.	(esCancelado) ifTrue:[		exito := false.		].	^exito.! !!ContratoFlexible methodsFor: 'funciones' stamp: 'Anonymous 2/19/2024 19:02'!modificarCon: unaFecha empresa: unaEmpresa y: opcion	|costo modificado rta esPago|	modificado := 0. "No es contrato Flexible."	costo := viajeContratado obtenerCostoPorPersona.	esPago := cantCuotas = 0.	(esCancelado) ifFalse:[	(esPago) ifFalse: [ 			(plus >= costo) ifTrue:[				rta := viajeContratado verificarFecha: unaFecha.				(rta) ifTrue:[					self setFechaViaje: unaFecha.					plus := plus - costo.					modificado := 1. "Se hizo la modificación"					self changed.				]				ifFalse:[					modificado := 2. "No se hizo porque no existe la fecha."						(opcion = 1) ifTrue:[						unaEmpresa cancelacion: numContrato.						modificado := 3.	"No se hizo, se cancela el contrato."					].					].			]ifFalse:[				modificado := 4. "No se hizo debido a que el plus es menor al costo."			].	].	]ifTrue:[ modificado := 5. ]. "El contrato ya está cancelado."					^modificado.	! !!ContratoFlexible methodsFor: 'funciones' stamp: 'Anonymous 2/19/2024 18:43'!cancelar	| reembolso diferencia esPago |	reembolso := 0.	esPago := cantCuotas = 0.	esCancelado		ifFalse: [			esPago ifFalse: [				diferencia := fechaDelViaje julianDayNumber				              - Date today julianDayNumber.				costoContrato > 0 ifTrue: [					diferencia > 90 ifTrue: [ reembolso := 75 / 100 * costoContrato ].					(diferencia <= 90 and: diferencia >= 60) ifTrue: [						reembolso := 50 / 100 * costoContrato ].					diferencia < 60 ifTrue: [ reembolso := 25 / 100 * costoContrato].					esCancelado := true.					self changed. ] ] ]		ifTrue: [ reembolso := -2990 ].	^ reembolso! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ContratoFlexible class	instanceVariableNames: ''!!ContratoFlexible class methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 12:05'!crearFechaContrato: unaFechaContrato viajeContratado: unViaje fechaDelViaje: unaFechaViaje cantCuotas: unaCantCuotas cantDePersonas: unaCantPersonas ConPlus: unPlus	|unContratoFlexible|	unContratoFlexible := self crearFechaContrato: unaFechaContrato 	viajeContratado: 	unViaje fechaDelViaje: unaFechaViaje cantCuotas: unaCantCuotas 	cantDePersonas: unaCantPersonas.	unContratoFlexible inicializarConPlus: unPlus.		^unContratoFlexible.		! !Object subclass: #EmpresaTurismo	instanceVariableNames: 'colClientes colViajes'	classVariableNames: ''	package: 'tpFinal-Modelo'!!EmpresaTurismo methodsFor: 'Contratos' stamp: 'Anonymous 2/12/2024 14:43'!pagarCuotas: unDni numeroContrato: numcCon cantidadCuotas: cantCuot|exito unCliente|exito := 0.unCliente :=  self obtenerCliente: unDni.(unCliente) ifNotNil: [exito := unCliente pagarCuotaCliente: numcCon  cantidad: cantCuot ].^ exito.! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/19/2024 21:32'!cancelacion: numContrato	|contrato reembolso unCliente exito|	exito := false.	unCliente := colClientes detect:[:cadaCliente| cadaCliente encontrarContrato: numContrato]  ifNone: [nil].		(unCliente isNotNil) ifTrue:[		contrato:= unCliente obtenerContrato: numContrato.		reembolso := unCliente cancelarContrato: contrato.			(reembolso = -1) ifFalse:[			exito := true.				]	].	^exito.! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'Anonymous 2/14/2024 23:32'!agregarExcursion: numContrato excursion: nombreEx cantAAplicar: unaCant"Método que agrega una excursión a una cantidad de personas determinada"|unContrato exito unCli|exito:=0.unCli:= colClientes detect:[:cli| cli encontrarContrato: numContrato ] ifNone:[nil].(unCli isNotNil) ifTrue:[ 	unContrato := unCli obtenerContrato: numContrato.	exito:= unContrato agregarExcursionContrato: nombreEx cantAAplicar: unaCant.		].^exito.! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'Anonymous 1/23/2024 21:04'!obtenerContratosCliente: unDni opcion: opcion|colContratos unCliente|unCliente := self obtenerCliente: unDni.(unCliente isNotNil)ifTrue:[	colContratos := unCliente retornarColContratos: opcion.	]. ^colContratos.! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'Anonymous 2/12/2024 14:43'!modificacionCon: numContrato fecha: unaFecha opcion: opcion	|rta unCliente exito contrato|	exito := 0.	unCliente := colClientes detect:[:cadaCliente| cadaCliente encontrarContrato: numContrato] 	ifNone:[nil].		(unCliente isNotNil) ifTrue:[		contrato:= unCliente obtenerContrato: numContrato.		rta:=unCliente modificarFechaViajeCon: contrato fecha: unaFecha  empresa: self opcion: opcion. 			exito := rta.	].	^exito.! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:22'!generarContratoCon: unDni unViaje: unViaje cantPersonas: unaCantPersonas cantCuotas: unasCuotas fechaViaje: unaFechaViaje	| exito unCliente viajeExiste fechaValida tamanio|	exito := 0.	unCliente := self obtenerCliente: unDni.	viajeExiste := self verificarExistencia: unViaje.	(unCliente isNotNil and: viajeExiste) ifTrue: [		fechaValida := (unViaje verificarFecha: unaFechaViaje) and: (unViaje validarCupoPersonas: unaCantPersonas  enFecha: unaFechaViaje).		fechaValida ifTrue: [			unCliente				cargarContratoCon: unViaje				cantPersonas: unaCantPersonas				cantCuotas: unasCuotas				fechaViaje: unaFechaViaje				fechaContrato: (Date today).			exito := 1. 			 tamanio := unCliente calcularCantContratosOrganizados.            tamanio > 0 ifTrue: [					(unCliente esViajeroFrecuente) ifFalse:[      		          unCliente transformarAViajeroFrecuente.						colClientes changed.     		          exito := 2 					]					] 					] ].	^ exito! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'Anonymous 2/15/2024 15:24'!efectivizacion: numContrato	|rta unCliente contrato viaje|	rta := 0.		unCliente := colClientes detect:[:cadaCliente| cadaCliente encontrarContratoPago: numContrato]  ifNone: [nil].	(unCliente isNotNil) ifTrue:[		contrato:= unCliente obtenerContratoPago: numContrato.		viaje := contrato getViajeContratado.		(viaje isNotNil) ifTrue:[rta := contrato efectivizar: unCliente. contrato changed.]		ifFalse:[rta := 2].			].		^rta.! !!EmpresaTurismo methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/20/2024 10:56'!generarContratoCon: unDni unViaje: unViaje cantPersonas: unaCantPersonas cantCuotas: unasCuotas fechaViaje: unaFechaViaje plus: unPlus	| exito unCliente viajeExiste fechaValida tamanio |	exito := 0.	unCliente := self obtenerCliente: unDni.	viajeExiste := self verificarExistencia: unViaje.	(unCliente isNotNil and: viajeExiste) ifTrue: [		fechaValida := (unViaje verificarFecha: unaFechaViaje) and:			               (unViaje				                validarCupoPersonas: unaCantPersonas				                enFecha: unaFechaViaje).		fechaValida ifTrue: [			unCliente				cargarContratoCon: unViaje				cantPersonas: unaCantPersonas				fechaViaje: unaFechaViaje				cantCuotas: unasCuotas				plus: unPlus				fechaContrato: Date today.			exito := 1.			tamanio := unCliente calcularCantContratosOrganizados.			tamanio > 0 ifTrue: [ unCliente esViajeroFrecuente ifFalse: [  				unCliente transformarAViajeroFrecuente.				colClientes changed. 				exito := 2] ] ] ].	^ exito! !!EmpresaTurismo methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 18:38'!modificarPrecioContrato: unViaje  | colTotalContratos |    colTotalContratos := OrderedCollection new.    colClientes do: [ :cliente |        colTotalContratos addAll: (cliente obtenerContratosConViaje: unViaje).    ].    colTotalContratos do: [ :con |        con modificarPrecioViaje: unViaje.    ].! !!EmpresaTurismo methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 16:05'!tieneContratosAsociados: unViaje	"Método que devuelve true si existe al menos un cliente con el viaje unViaje"	| cliente |	cliente := colClientes		           detect: [ :cli | cli tieneContratoConViaje:  unViaje ]		           ifNone: [ nil ].	^ cliente isNotNil! !!EmpresaTurismo methodsFor: 'constructor'!inicializarColViajes: unaColViajes conColClientes: unaColPersonas	colClientes := unaColPersonas.	colViajes := unaColViajes.! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 1/22/2024 19:06'!existeCliente: unDni	|unCliente|	unCliente := colClientes detect:[:cadaCliente| cadaCliente esIgualCliente: unDni] ifNone:[nil].	^unCliente isNotNil.! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 2/16/2024 10:12'!eliminarCliente: unDni|exito unCliente|exito := false.unCliente := self obtenerCliente: unDni.(unCliente isNotNil)ifTrue:[	colClientes remove: unCliente.		exito := true.	colClientes changed.].^exito.	! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 2/14/2024 23:31'!modificarCliente: unDni apellido: unApellido|exito unCliente|exito := false.unCliente := self obtenerCliente: unDni.(unCliente isNotNil)ifTrue:[	unCliente setApellido: unApellido.	exito := true.		colClientes changed.	].^exito.	! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'tony 7/30/2023 17:49'!getColClientes	^colClientes.! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 2/14/2024 23:30'!generarCliente: apellido dni: unDni residencia: residencia contratos: unaColContratos preferencias: unasPreferencias|existe exito cliente|exito := false.existe := self existeCliente: unDni.(existe)ifFalse:[	cliente := Cliente crearApellido: apellido Dni: unDni  datosContacto: '' residencia: residencia  colContratos: unaColContratos  preferencias: unasPreferencias.	colClientes add: cliente. 				exito := true.	colClientes changed.].^exito.! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'tony 7/31/2023 10:36'!obtenerCliente: unDni	|unCliente|	unCliente := colClientes detect:[:cadaCliente| cadaCliente esIgualCliente: unDni] ifNone:[nil].	^unCliente.! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'tony 7/31/2023 13:03'!revisarClienteContrato|colClientesRecordatorio|colClientesRecordatorio := colClientes select: [:cliente| cliente verificarPagoContrato. ].^colClientesRecordatorio.! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 2/14/2024 23:31'!modificarCliente: unDni preferencias: unasPreferencias|exito unCliente|exito := false.unCliente := self obtenerCliente: unDni.(unCliente isNotNil)ifTrue:[	unCliente setPreferencias: unasPreferencias.	exito := true.	colClientes changed.	].^exito.	! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 2/14/2024 23:31'!modificarCliente: unDni residencia: unaResidencia|exito unCliente|exito := false.unCliente := self obtenerCliente: unDni.(unCliente isNotNil)ifTrue:[	unCliente setResidencia: unaResidencia.	exito := true.	colClientes changed.	].^exito.	! !!EmpresaTurismo methodsFor: 'Clientes' stamp: 'Anonymous 2/14/2024 23:31'!generarViajero: apellido dni: unDni residencia: residencia contratos: unaColContratos preferencias: unasPreferencias|existe exito viajero|exito := false.existe := self existeCliente: unDni.(existe)ifFalse:[	viajero := ViajeroFrecuente crearApellido: apellido Dni: unDni  datosContacto: '' residencia: residencia  colContratos: unaColContratos  preferencias: unasPreferencias.	colClientes add: viajero. 				exito := true.	colClientes changed.].^exito.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/14/2024 23:28'!agregarViaje: unViaje"Método que agrega un viaje si es que no existe en el sistema"|exito existe|exito:=false.existe:= self verificarExistencia: unViaje.(existe) ifFalse:[ self agregarASistema: unViaje.	                   exito:= true.].^exito.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 1/18/2024 13:09'!retornarViaje: nombreViaje|unViaje exito|exito := true.unViaje := colViajes detect: [:cadaViaje| cadaViaje verificarNombre: nombreViaje] ifNone:[nil].^unViaje.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/14/2024 23:28'!agregarEtapaEmpresa: viaje diaLlegada: undia hotel: elHotel cantDias: unaCant pension: tipoP actividades: colActs"Método que agrega una etapa a un viaje"|esOrg exito res|res:=false.exito:=false.esOrg:= viaje esViajeOrganizado.(esOrg) ifTrue:[	res:=viaje agregarEtapaDiaLlegada: undia hotel: elHotel cantDias: unaCant  tipoPension: tipoP         actividades: colActs.	exito:=res.	colViajes changed.	].^exito.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 19:31'!verViajes|mensaje|mensaje:=''.colViajes do: [ :viaje | mensaje:= mensaje , viaje toString asString. ].^mensaje.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/14/2024 23:28'!agregarASistema: unViaje"Método que agrega un nuevo viaje al sistema"colViajes add: unViaje.colViajes changed.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/12/2024 14:43'!mostrarViajesEntreFechas: fecha1 fecha2: fecha2    "Método que imprime los viajes que se realizarán entre esas fechas"    | corresponde datosViaje separador |    datosViaje := ''.    separador := '--------------------', String crlf.    colViajes do: [ :viaje |         (corresponde := viaje tieneFechaEntre: fecha1 fecha2: fecha2).         corresponde ifTrue: [            datosViaje := datosViaje, 'VIAJE->', String crlf.            datosViaje := datosViaje, viaje toString, String crlf.            datosViaje := datosViaje, separador.        ]    ].	    ^ datosViaje.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 1/18/2024 14:17'!toStringViaje	|cadena|		cadena := ''.	colViajes do: [ :viaje| cadena:=cadena, ' ', viaje getNombre. ].	^cadena.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 19:37'!tieneViaje: nombViaje|viaje|viaje:=self retornarViaje: nombViaje.^viaje isNotNil.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/19/2024 16:01'!eliminarViaje: nombreViaje	"Método que elimina un viaje del sistema	0: no existe el viaje 	1: tiene contratos asociados	2: exito"	| exito viaje tieneContrato |	exito := 0.	viaje := colViajes		         detect: [ :viajes | viajes verificarNombre: nombreViaje ]		         ifNone: [ nil ].	viaje ifNotNil: [ "Se encontró el viaje""Verifico que en colClientes NO se tengan contratos asociados a él"		tieneContrato := self tieneContratosAsociados: viaje.		tieneContrato			ifTrue: [ exito := 1 ]			ifFalse: [				colViajes remove: viaje.				exito := 2.				colViajes changed ] ].	^ exito! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/16/2024 17:28'!modificarViaje: unViaje nombre: unNombre	| exito |	exito := self verificarExistencia: unViaje.	exito ifTrue: [		unNombre isNotNil ifTrue:[		unViaje setNombre: unNombre.		exito := true.		colViajes changed]ifFalse: [ exito:=false. ] ].	^ exito! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 19:35'!getViajes^colViajes.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 19:29'!obtenerViaje: nombreViaje"Método que obtiene un viaje con el nombre dado"|unViaje|unViaje:=colViajes detect:[:viaj|viaj verificarNombre: nombreViaje.] ifNone: [ nil ].^unViaje.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'tony 7/31/2023 13:09'!verificarExistencia: unViaje"Método que verifica la existencia de un viaje a partir de su nombre"|nombreViaje	 viajeEncontrado|	nombreViaje:= unViaje getNombre.	viajeEncontrado:= colViajes detect: [ :viaje| viaje verificarNombre: nombreViaje. ] ifNone: [ nil ].^viajeEncontrado isNotNil.! !!EmpresaTurismo methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 19:06'!colViajesEntreFechas: fecha1 fecha2: fecha2    "Método que devuelve una colección de viajes que se realizarán entre las fechas dadas."    | colV |    colV := OrderedCollection new.    colV := colViajes select: [ :viaje |        viaje tieneFechaEntre: fecha1 fecha2: fecha2.].    ^ colV! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmpresaTurismo class	instanceVariableNames: ''!!EmpresaTurismo class methodsFor: 'constructor' stamp: 'Anonymous 1/15/2024 19:30'!crearEmpresa|carga unaEmpresa|unaEmpresa := self new.carga := Precarga crear.unaEmpresa inicializarColViajes: (carga getcolViajes) conColClientes: (carga getcolClientes).^unaEmpresa. ! !Object subclass: #Etapa	instanceVariableNames: 'diaLlegada cantDias hotel tipoPension listaActividades'	classVariableNames: ''	package: 'tpFinal-Modelo'!!Etapa methodsFor: 'verificación' stamp: 'tony 7/31/2023 13:12'!esIgualDiaLlegada: undia hotel: elHotel    ^ diaLlegada = undia and: elHotel = hotel.! !!Etapa methodsFor: 'getters' stamp: 'Anonymous 2/23/2024 11:50'!toString	| mensaje actividades |	actividades := 'Lista de actividades: '.	mensaje := String crlf , 'ETAPA ->' , String crlf.	mensaje := mensaje , 'Numero: ' , diaLlegada asString , ' // '	           , 'Cantidad de días: ' , cantDias asString , ' // '	           , 'Hotel: ' , hotel , ' // ' , 'Tipo de pensión: '	           , tipoPension.	listaActividades do: [ :act |		actividades := actividades , act , ' , ' ].	^ mensaje , String crlf , actividades! !!Etapa methodsFor: 'constructor'!inicializarDiaLlegada: dias cantDias: cantidad hotel: unHotel tipoPension: tipo listaActividades: unaListaActividades	diaLlegada := dias.	cantDias := cantidad.	hotel := unHotel.	tipoPension := tipo.	listaActividades := unaListaActividades.  ! !!Etapa methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/18/2024 14:28'!getDiaLlegada	^ diaLlegada asString.! !!Etapa methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/18/2024 14:29'!igualDiaLleg: unDia	^ unDia = diaLlegada! !!Etapa methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 18:11'!cambiarCostoViaje: unViaje! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Etapa class	instanceVariableNames: ''!!Etapa class methodsFor: 'constructor'!crearDiaLlegada: dias cantDias: cantidad hotel: unHotel tipoPension: tipo listaActividades: unaListaActividades	|unaEtapa|	unaEtapa := self new.	unaEtapa inicializarDiaLlegada: dias cantDias: cantidad hotel: unHotel tipoPension: tipo 	listaActividades: unaListaActividades.	^unaEtapa.	! !Object subclass: #Excursion	instanceVariableNames: 'nombreExcursion costo'	classVariableNames: ''	package: 'tpFinal-Modelo'!!Excursion methodsFor: 'verificación' stamp: 'Anonymous 2/9/2024 12:54'!esIgualExcursion: nombreEx^nombreEx = nombreExcursion.! !!Excursion methodsFor: 'verificación' stamp: 'VictoriaBugli 2/14/2024 21:14'!esIgual: Ex	^ nombreExcursion = Ex getNombreExcursion.! !!Excursion methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 17:44'!inicializarNombreExcursion: unNombre costo: unCosto 	nombreExcursion := unNombre.	costo := unCosto.		! !!Excursion methodsFor: 'getters' stamp: 'VictoriaBugli 1/24/2024 18:11'!toString	^ String crlf , 'EXCURSIÓN ->' , String crlf , 'Nombre : ' , nombreExcursion	  , ' _ ' , 'Costo: ' , costo asString , ' '! !!Excursion methodsFor: 'getters' stamp: 'tony 7/31/2023 13:08'!getPrecio^costo.! !!Excursion methodsFor: 'getters' stamp: 'Anonymous 1/26/2024 19:26'!getNombreExcursion^nombreExcursion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Excursion class	instanceVariableNames: ''!!Excursion class methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 17:43'!crearNombreExcursion: unNombre costo: unCosto	|unaExcursion|	unaExcursion := self new.	unaExcursion inicializarNombreExcursion: unNombre costo: unCosto.	^unaExcursion.! !Object subclass: #ExcursionOp	instanceVariableNames: 'costo nombreExcursion cantPersonas'	classVariableNames: ''	package: 'tpFinal-Modelo'!!ExcursionOp methodsFor: 'Contratos' stamp: 'Anonymous 2/9/2024 17:36'!esIgual: nombreEx^nombreEx = nombreExcursion.! !!ExcursionOp methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 13:08'!inicializarNombreExcursion: unNombre costo: unCosto cantPersonas: unaCantidad    nombreExcursion := unNombre.    costo := unCosto.    cantPersonas := unaCantidad.! !!ExcursionOp methodsFor: 'getters' stamp: 'Anonymous 2/9/2024 17:50'!toString	^ String crlf , 'EXCURSIÓN ->' , String crlf , 'Nombre : ' , nombreExcursion	  , ' _ ' , 'Costo: ' , costo asString , ' Cantidad de personas: ' , cantPersonas asString, ' '.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ExcursionOp class	instanceVariableNames: ''!!ExcursionOp class methodsFor: 'constructor' stamp: 'Anonymous 2/9/2024 13:08'!crearNombreExcursion: unNombre costo: unCosto cantPersonas: unaCantidad    | unaExcursion |    unaExcursion := self new.    unaExcursion        inicializarNombreExcursion: unNombre        costo: unCosto        cantPersonas: unaCantidad.    ^unaExcursion! !Object subclass: #FechaSalida	instanceVariableNames: 'fecha cupo'	classVariableNames: ''	package: 'tpFinal-Modelo'!!FechaSalida methodsFor: 'verificación' stamp: 'VictoriaBugli 1/24/2024 17:38'!verificarFechaCupo: fecha1 fecha2: fecha2	"Método que retorna true si dentro del rango de las fechas ingresadas hay cupo"	^ (fecha >= fecha1 and: [ fecha <= fecha2 ]) and: [ cupo > 0 ].! !!FechaSalida methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/14/2024 18:06'!esIgual: fechaS	^fecha = fechaS getFechaSalida! !!FechaSalida methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 23:23'!getCupo^cupo.! !!FechaSalida methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 19:03'!imprimirFecha^fecha asString! !!FechaSalida methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 18:17'!getFechaCupo	^ fecha.! !!FechaSalida methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 18:22'!getFechaSalida	^ fecha! !!FechaSalida methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 23:58'!toString	^ fecha asString , ' [CUPO:' , cupo asString,']'.! !!FechaSalida methodsFor: 'setters' stamp: 'Victoria 1/11/2024 20:17'!verificarCupo: unaFecha	^(fecha = unaFecha).! !!FechaSalida methodsFor: 'setters' stamp: 'VictoriaBugli 2/8/2024 18:17'!setFecha: unaFechafecha:=unaFecha.! !!FechaSalida methodsFor: 'setters' stamp: 'VictoriaBugli 2/8/2024 18:20'!setCupo: unCupcupo:=unCup.! !!FechaSalida methodsFor: 'constructor' stamp: 'Victoria 1/11/2024 20:18'!inicializarConFechaSalida: unaFecha cupo: uncupo	fecha := unaFecha.	cupo:=uncupo.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FechaSalida class	instanceVariableNames: 'fecha cupo'!!FechaSalida class methodsFor: 'Constructor' stamp: 'Victoria 1/11/2024 20:14'!inicializarConFechaSalida: unaFecha cupo: uncupo	fecha := unaFecha.	cupo:=uncupo.! !!FechaSalida class methodsFor: 'Constructor' stamp: 'Victoria 1/11/2024 20:15'!crearConFechaSalida: unaFecha unCupo: cupo1	|unaFechaSalida|	unaFechaSalida := self new.	unaFechaSalida inicializarConFechaSalida: unaFecha cupo: cupo1.	^unaFechaSalida .! !Object subclass: #Precarga	instanceVariableNames: ''	classVariableNames: 'colClientes colViajes'	package: 'tpFinal-Modelo'!!Precarga methodsFor: 'Clientes' stamp: 'Anonymous 1/15/2024 19:28'!getcolClientes^colClientes.! !!Precarga methodsFor: 'Viajes' stamp: 'Anonymous 1/15/2024 19:28'!getcolViajes^colViajes.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Precarga class	instanceVariableNames: ''!!Precarga class methodsFor: 'constructor' stamp: 'Anonymous 1/15/2024 19:26'!crear|carga|	carga := self new.	Contrato setNro.	Precarga cargarInformacion.	^carga.! !!Precarga class methodsFor: 'Creacion' stamp: 'Anonymous 1/15/2024 18:34'!crearClientes	colClientes := OrderedCollection new.	"ocho clientes/viajerosFrecuentes"	colClientes add: (Cliente crearApellido: 'Alvarez' Dni: 21030121  datosContacto: ''  residencia: 'Neuquén'  colContratos: (OrderedCollection new)  preferencias: 'Playa').	colClientes add: (Cliente crearApellido: 'Benitez' Dni: 22060122  datosContacto: ''  residencia: 'Neuquén'  colContratos: (OrderedCollection new)  preferencias: 'Montaña').	colClientes add: (Cliente crearApellido: 'Cáceres' Dni: 23090123  datosContacto: ''  residencia: 'Cipoletti'  colContratos: (OrderedCollection new)  preferencias: 'Rio').	colClientes add: (Cliente crearApellido: 'Dominguez' Dni: 24120124  datosContacto: ''  residencia: 'Cipoletti'  colContratos: (OrderedCollection new)  preferencias: 'Montaña').	colClientes add: (ViajeroFrecuente crearApellido: 'Estevanez' Dni: 25150125  datosContacto:''  residencia:'Viedma'  colContratos: (OrderedCollection new)  preferencias: 'Playa').	colClientes add: (ViajeroFrecuente crearApellido: 'Fernandez' Dni: 26180126  datosContacto:''  residencia:'Viedma'  colContratos: (OrderedCollection new)  preferencias: 'Rio').	colClientes add: (ViajeroFrecuente crearApellido: 'Galindez' Dni: 27210127  datosContacto:''  residencia:'Zapala'  colContratos: (OrderedCollection new)  preferencias: 'Playa').	colClientes add: (ViajeroFrecuente crearApellido: 'Hernandez' Dni: 28240128  datosContacto:''  residencia:'Zapala'  colContratos: (OrderedCollection new)  preferencias: 'Montaña').						! !!Precarga class methodsFor: 'Creacion' stamp: 'Anonymous 1/15/2024 19:26'!cargarInformacion	Precarga crearClientes.	Precarga crearViajes.	Precarga crearContratos.! !!Precarga class methodsFor: 'Creacion' stamp: 'VictoriaBugli 2/19/2024 17:56'!crearContratos	"ocho contratos, con ocho clientes distintos y ocho viajes distintos."	(colClientes at: 1)		cargarContratoCon: (colViajes at: 1)		cantPersonas: 5		fechaViaje:  (Date year: 2024 month: 2 day: 25)		cantCuotas: 3		plus: 1000000		fechaContrato: (Date year: 2024 month: 1 day: 25).	(colClientes at: 2)		cargarContratoCon: (colViajes at: 2)		cantPersonas: 4		fechaViaje: ((colViajes at: 2) getFechas at: 1) getFechaCupo		cantCuotas: 2		plus: 1000000		fechaContrato: (Date year: 2024 month: 1 day: 25).	(colClientes at: 3)		cargarContratoCon: (colViajes at: 3)		cantPersonas: 3		fechaViaje: ((colViajes at: 3) getFechas at: 1) getFechaCupo		cantCuotas: 6		plus: 10		fechaContrato: (Date year: 2024 month: 1 day: 4).	(colClientes at: 4)		cargarContratoCon: (colViajes at: 4)		cantPersonas: 5		fechaViaje: ((colViajes at: 4) getFechas at: 1) getFechaCupo		cantCuotas: 6		plus: 10		fechaContrato: (Date year: 2024 month: 1 day: 4).	(colClientes at: 5)		cargarContratoCon: (colViajes at: 5)		cantPersonas: 6		cantCuotas: 9		fechaViaje: (colViajes at: 5) obtenerFechaSalida		fechaContrato: (Date year: 2024 month: 1 day: 21).	(colClientes at: 6)		cargarContratoCon: (colViajes at: 6)		cantPersonas: 4		cantCuotas: 9		fechaViaje: (colViajes at: 6) obtenerFechaSalida		fechaContrato: (Date year: 2024 month: 1 day: 21).	(colClientes at: 7)		cargarContratoCon: (colViajes at: 7)		cantPersonas: 3		cantCuotas: 9		fechaViaje: (colViajes at: 7) obtenerFechaSalida		fechaContrato: (Date year: 2024 month: 1 day: 21).	(colClientes at: 8)		cargarContratoCon: (colViajes at: 8)		cantPersonas: 4		cantCuotas: 1		fechaViaje: (colViajes at: 8) obtenerFechaSalida		fechaContrato: (Date year: 2024 month: 1 day: 1)! !!Precarga class methodsFor: 'Creacion' stamp: 'VictoriaBugli 2/19/2024 16:28'!crearViajes	| etapa colEtapas colAct colExcursiones colFechas aux |	"Colección de actividades por defecto para una etapa."	colAct := #( 'Cine' 'Teatro' 'Zoologico' 'Parque' 'Museo' ).	"Colección de etapas para viajes organizados."	colEtapas := OrderedCollection new.	1 to: 5 do: [ :i |		etapa := Etapa			         crearDiaLlegada: i asNumber			         cantDias: i asNumber			         hotel: '3 estrellas'			         tipoPension: ' Hostel '			         listaActividades: colAct.		colEtapas add: etapa ].	"Colección de dos excursiones por defecto para viajes organizados."	colExcursiones := OrderedCollection new.	colExcursiones add: (Excursion			 crearNombreExcursion: 'Caminata por el sendero hacia el lago.'			 costo: 12000).	colExcursiones add: (Excursion			 crearNombreExcursion: 'Visita al bosque escondido.'			 costo: 15500).	"Colección de fechas para viajes organizados."	colFechas := OrderedCollection new.	aux := 0.	1 to: 5 do: [ :j |		colFechas add: (FechaSalida				 crearConFechaSalida:				 ((Date year: 2024 month: 02 day: 15) addDays: aux)				 unCupo: 4).		aux := aux + 3 ].	"Cuatro viajes organizados. Dos con excursiones opcionales, dos sin ellas."	colViajes := OrderedCollection new.	colViajes add: (ViajeOrganizado			 crearNombre: 'Neuquén-Córdoba'			 costoPorPersona: 250000			 ColFechas: colFechas			 duracion: 14			 colEtapas: colEtapas).	colViajes add: (ViajeOrganizado			 crearNombre: 'Neuquén-Buenos Aires'			 costoPorPersona: 190000			 ColFechas: colFechas			 duracion: 5			 colEtapas: colEtapas).	colViajes add: (ViajeOrganizado			 crearNombre: 'Viedma-Mendoza'			 costoPorPersona: 300000			 ColFechas: colFechas			 duracion: 14			 colEtapas: colEtapas).	colViajes add: (ViajeOrganizado			 crearNombre: 'Mendoza-Neuquén'			 costoPorPersona: 240000			 ColFechas: colFechas			 duracion: 7			 colEtapas: colEtapas).	(colViajes at: 1) agregarExcursiones: colExcursiones.	(colViajes at: 3) agregarExcursiones: colExcursiones.	"Cuatro viajes especiales."	colViajes add: (ViajeEspecial			 crearNombre: 'Córdoba-Mendoza'			 costoPorPersona: 230000			 Ciudad: 'Mendoza'			 fechaSalida: (FechaSalida					  crearConFechaSalida: (Date year: 2024 month: 3 day: 1)					  unCupo: 10)			 fechaRegreso: ((Date year: 2024 month: 3 day: 1) addDays: 7)).	colViajes add: (ViajeEspecial			 crearNombre: 'Santiago del Estero-Buenos Aires'			 costoPorPersona: 410000			 Ciudad: 'Capital Federal'			 fechaSalida: (FechaSalida					  crearConFechaSalida: (Date year: 2024 month: 3 day: 2)					  unCupo: 20)			 fechaRegreso: ((Date year: 2024 month: 3 day: 2) addDays: 7)).	colViajes add: (ViajeEspecial			 crearNombre: 'San Miguel de Tucumán-Ushuaia'			 costoPorPersona: 524000			 Ciudad: 'Ushuaia'			 fechaSalida: (FechaSalida					  crearConFechaSalida: (Date year: 2024 month: 3 day: 3)					  unCupo: 5)			 fechaRegreso: ((Date year: 2024 month: 3 day: 3) addDays: 14)).	colViajes add: (ViajeEspecial			 crearNombre: 'Santa Fe-Neuquén'			 costoPorPersona: 444000			 Ciudad: 'Neuquén Capital'			 fechaSalida: (FechaSalida					  crearConFechaSalida: (Date year: 2024 month: 2 day: 4)					  unCupo: 2)			 fechaRegreso: ((Date year: 2024 month: 2 day: 4) addDays: 14))! !Object subclass: #Viaje	instanceVariableNames: 'nombre costoPorPersona valorImpuestos'	classVariableNames: 'cantMillas'	package: 'tpFinal-Modelo'!!Viaje methodsFor: 'abstracto' stamp: 'VictoriaBugli 2/8/2024 21:29'!validarCupoPersonas: unaCant enFecha: unaF	"Este método devuelve un boolean. Si es verdadero, es porque para la cantidad de personas del contrato hay cupo suficiente en este viaje."^self subclassResponsibility.! !!Viaje methodsFor: 'abstracto' stamp: 'Anonymous 2/13/2024 16:39'!retornarFechaDeCupo^ self subclassResponsibility.! !!Viaje methodsFor: 'abstracto' stamp: 'Anonymous 1/30/2024 18:53'!verificarFecha: unaFecha	^self subclassResponsibility.! !!Viaje methodsFor: 'abstracto' stamp: 'tony 7/31/2023 12:59'!tieneFechaEntre: fecha1 fecha2: fecha2^self subclassResponsibility.! !!Viaje methodsFor: 'abstracto' stamp: 'Victoria 1/18/2024 18:53'!verificarNombre: nombreViaje"Método que verifca que un nombre es igual a otro, a partir de su nombre"^nombre = nombreViaje.! !!Viaje methodsFor: 'constructor'!inicializarNombre: unNom costoPorPersona: unCosto	nombre := unNom.	costoPorPersona := unCosto.	valorImpuestos := (10/100) * costoPorPersona.! !!Viaje methodsFor: 'setters' stamp: 'VictoriaBugli 2/19/2024 18:41'!setCosto: costo	costoPorPersona := costo.	valorImpuestos := 10 / 100 * costoPorPersona.				self changed! !!Viaje methodsFor: 'setters' stamp: 'Anonymous 2/14/2024 23:45'!setNombre: nom nombre:=nom.self changed.! !!Viaje methodsFor: 'setters' stamp: 'Anonymous 2/14/2024 23:45'!calcularPrecio: cantPersonas|precio|precio := (costoPorPersona*cantPersonas) + valorImpuestos.^precio.! !!Viaje methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 18:06'!getCosto^costoPorPersona.! !!Viaje methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/19/2024 15:50'!esIgual: unViaje^nombre = unViaje getNombre.! !!Viaje methodsFor: 'verificación' stamp: 'tony 7/31/2023 13:06'!esViajeOrganizado^self subclassResponsibility.! !!Viaje methodsFor: 'getters' stamp: 'tony 7/29/2023 17:32'!obtenerCostoPorPersona^self subclassResponsibility.! !!Viaje methodsFor: 'getters' stamp: 'Victoria 1/18/2024 15:25'!getNombre^nombre asString.! !!Viaje methodsFor: 'getters' stamp: 'Victoria 7/30/2023 15:10'!obtenerImpuesto^valorImpuestos.! !!Viaje methodsFor: 'getters' stamp: 'tony 7/30/2023 16:27'!obtenerImpuestos	^valorImpuestos.! !!Viaje methodsFor: 'getters' stamp: 'Anonymous 2/19/2024 20:06'!obtenerMillas    | sumMillas |    sumMillas := 0.    (costoPorPersona >= 20000 and: costoPorPersona <= 30000) ifTrue: [        sumMillas := cantMillas at: 1 asNumber.    ] ifFalse: [        (costoPorPersona >= 30000 and: costoPorPersona <= 40000) ifTrue: [            sumMillas := cantMillas at: 2 asNumber.        ] ifFalse: [            (costoPorPersona >= 40000 and: costoPorPersona <= 50000) ifTrue: [                sumMillas := cantMillas at: 3 asNumber.            ] ifFalse: [                (costoPorPersona >= 50000 and: costoPorPersona <= 60000) ifTrue: [                    sumMillas := cantMillas at: 4 asNumber.                ] ifFalse: [                    (costoPorPersona >= 60000 and: costoPorPersona <= 70000) ifTrue: [                        sumMillas := cantMillas at: 5 asNumber.                    ] ifFalse: [                        (costoPorPersona >= 70000 and: costoPorPersona <= 80000) ifTrue: [                            sumMillas := cantMillas at: 6 asNumber.                        ] ifFalse: [                            (costoPorPersona >= 80000 and: costoPorPersona <= 90000) ifTrue: [                                sumMillas := cantMillas at: 7 asNumber.                            ] ifFalse: [                                (costoPorPersona >= 90000) ifTrue: [                                    sumMillas := cantMillas at: 8 asNumber.                                ].                            ].                        ].                    ].                ].            ].        ].    ].    ^ sumMillas.! !!Viaje methodsFor: 'getters' stamp: 'VictoriaBugli 1/23/2024 21:26'!mostrarEtiqueta	| esOrg tipo |	esOrg := self esViajeOrganizado.	esOrg		ifTrue: [ tipo := 'VIAJE ORGANIZADO' ]		ifFalse: [ tipo := 'VIAJE ESPECIAL' ].	^ nombre asString , ' * ' , tipo asString! !!Viaje methodsFor: 'getters' stamp: 'VictoriaBugli 1/22/2024 23:53'!toString	^ 'Nombre del viaje: ' , nombre , String lf , 'Costo por persona: '	  , costoPorPersona asString , String lf , 'Impuesto aplicado: '	  , valorImpuestos asString , String lf! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Viaje class	instanceVariableNames: ''!!Viaje class methodsFor: 'Constructor'!crearNombre: unNom costoPorPersona: unCosto	|unViaje|	unViaje := self new.	unViaje inicializarNombre: unNom costoPorPersona: unCosto.	^unViaje. ! !!Viaje class methodsFor: 'Constructor'!inicializarMillas    cantMillas := #(5 10 15 20 25 30 35 40).! !Viaje subclass: #ViajeEspecial	instanceVariableNames: 'ciudad fechaSalida fechaRegreso'	classVariableNames: ''	package: 'tpFinal-Modelo'!!ViajeEspecial methodsFor: 'setters' stamp: 'VictoriaBugli 2/8/2024 18:23'!aplazarFechaSalida: unafechaSalida esDeSalida: esDeSalida	"Método que se encarga de agregar o quitar días de un viaje"	| diferencia |	diferencia := fechaSalida getFechaSalida subtractDate: fechaRegreso.	esDeSalida		ifTrue: [			fechaSalida setFecha: unafechaSalida.			fechaRegreso := fechaRegreso addDays: diferencia ]		ifFalse: [			fechaRegreso := unafechaSalida getFechaSalida.			fechaRegreso := fechaRegreso subtractDays: diferencia ].	^ true! !!ViajeEspecial methodsFor: 'setters' stamp: 'Anonymous 2/14/2024 23:53'!setFechaSalida: unaFechaS 	fechaSalida setFecha: unaFechaS.	self changed.! !!ViajeEspecial methodsFor: 'setters' stamp: 'Anonymous 2/14/2024 23:53'!setCiudad: unaCiuciudad :=unaCiu.self changed.! !!ViajeEspecial methodsFor: 'setters' stamp: 'Anonymous 2/14/2024 23:53'!setFechaRegreso: unaFechaRfechaRegreso:=unaFechaR.self changed.! !!ViajeEspecial methodsFor: 'setters' stamp: 'VictoriaBugli 2/18/2024 16:19'!validarCupoPersonas: unaCant enFecha: unaF	"Este método devuelve un boolean. Si es verdadero, es porque para la cantidad de personas del contrato hay cupo suficiente en este viaje."	| esSuficiente cupoFechaElegida |	esSuficiente := false.	fechaSalida ifNotNil: [		cupoFechaElegida := fechaSalida getCupo.		esSuficiente := cupoFechaElegida >= unaCant.		esSuficiente ifTrue: [			fechaSalida setCupo: cupoFechaElegida - unaCant.			self changed. ] ].	^ esSuficiente! !!ViajeEspecial methodsFor: 'getters' stamp: 'tony 7/29/2023 17:32'!obtenerCostoPorPersona ^costoPorPersona.! !!ViajeEspecial methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 18:21'!obtenerFechaSalida	^ fechaSalida getFechaCupo.! !!ViajeEspecial methodsFor: 'getters' stamp: 'Anonymous 2/13/2024 16:42'!retornarFechaDeCupo	|coleccion|	coleccion := OrderedCollection new.	coleccion add: (fechaSalida getFechaSalida).^coleccion.! !!ViajeEspecial methodsFor: 'getters' stamp: 'Victoria 7/25/2023 10:51'!obtenerMillas    | sumMillas |    sumMillas := 0.    (costoPorPersona >= 20000 and: costoPorPersona <= 30000) ifTrue: [        sumMillas := cantMillas at: 1.    ] ifFalse: [        (costoPorPersona >= 30000 and: costoPorPersona <= 40000) ifTrue: [            sumMillas := cantMillas at: 2.        ] ifFalse: [            (costoPorPersona >= 40000 and: costoPorPersona <= 50000) ifTrue: [                sumMillas := cantMillas at: 3.            ] ifFalse: [                (costoPorPersona >= 50000 and: costoPorPersona <= 60000) ifTrue: [                    sumMillas := cantMillas at: 4.                ] ifFalse: [                    (costoPorPersona >= 60000 and: costoPorPersona <= 70000) ifTrue: [                        sumMillas := cantMillas at: 5.                    ] ifFalse: [                        (costoPorPersona >= 70000 and: costoPorPersona <= 80000) ifTrue: [                            sumMillas := cantMillas at: 6.                        ] ifFalse: [                            (costoPorPersona >= 80000 and: costoPorPersona <= 90000) ifTrue: [                                sumMillas := cantMillas at: 7.                            ] ifFalse: [                                (costoPorPersona >= 90000) ifTrue: [                                    sumMillas := cantMillas at: 8.                                ].                            ].                        ].                    ].                ].            ].        ].    ].    ^ sumMillas.! !!ViajeEspecial methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 19:15'!toString	| mensaje |	mensaje := super toString.	mensaje := mensaje , 'Ciudad: ' , ciudad , String crlf	           , 'Fecha de Salida: ' , fechaSalida toString , String crlf	           , 'Fecha de Regreso: ' , fechaRegreso asString	           , String crlf.	^ mensaje! !!ViajeEspecial methodsFor: 'initialization' stamp: 'Anonymous 2/14/2024 23:53'!setFechaCup: unCupofechaSalida setCupo: unCupo.self changed.! !!ViajeEspecial methodsFor: 'constructor' stamp: 'VictoriaBugli 2/8/2024 19:33'!inicializarCiudad: unaCiu fechaSalida: unaFechaS fechaRegreso: unaFechaR 	ciudad := unaCiu.	fechaSalida := unaFechaS.	fechaRegreso := unaFechaR! !!ViajeEspecial methodsFor: 'verificación' stamp: 'VictoriaBugli 2/18/2024 22:08'!tieneFechaEntre: unaFecha fecha2: otraFecha    ^ fechaSalida getFechaSalida >= unaFecha and: fechaSalida getFechaSalida <= otraFecha.! !!ViajeEspecial methodsFor: 'verificación' stamp: 'VictoriaBugli 1/22/2024 19:35'!verificarNombre: nombreViaje	"Método que verifca que un nombre es igual a otro, a partir de su nombre"	^ nombreViaje = nombre! !!ViajeEspecial methodsFor: 'verificación' stamp: 'tony 7/31/2023 13:08'!esViajeOrganizado^false.! !!ViajeEspecial methodsFor: 'verificación' stamp: 'VictoriaBugli 2/8/2024 18:22'!verificarFecha: unaFecha	^ fechaSalida getFechaSalida = unaFecha! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeEspecial class	instanceVariableNames: ''!!ViajeEspecial class methodsFor: 'Constructor' stamp: 'VictoriaBugli 2/8/2024 19:34'!crearNombre: unNom costoPorPersona: unCosto Ciudad: unaCiu fechaSalida: unaFechaS fechaRegreso: unaFechaR 	| unViajeEsp |	unViajeEsp := self crearNombre: unNom costoPorPersona: unCosto.	unViajeEsp		inicializarCiudad: unaCiu		fechaSalida: unaFechaS		fechaRegreso: unaFechaR		.	^ unViajeEsp! !Viaje subclass: #ViajeOrganizado	instanceVariableNames: 'colFechas duracion colEtapas excursionesOp'	classVariableNames: ''	package: 'tpFinal-Modelo'!!ViajeOrganizado methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 16:23'!getDuracion^duracion.! !!ViajeOrganizado methodsFor: 'as yet unclassified' stamp: 'VictoriaBugli 2/19/2024 16:13'!numEtapa ^ colEtapas size.! !!ViajeOrganizado methodsFor: 'setters' stamp: 'Anonymous 2/14/2024 23:52'!setDuracion: duraduracion:=dura.self changed.! !!ViajeOrganizado methodsFor: 'funciones' stamp: 'VictoriaBugli 2/18/2024 14:30'!tieneEtapaEnDia: diaLleg	| etapa |	etapa:= colEtapas detect: [ :et | et igualDiaLleg: diaLleg ] ifNone: [ nil ].	^etapa isNotNil.	! !!ViajeOrganizado methodsFor: 'funciones' stamp: 'VictoriaBugli 2/8/2024 21:08'!obtenerFecha: unaFecha |fechaS|fechaS:= FechaSalida new. fechaS:= colFechas detect: [ :f | f getFechaSalida = unaFecha ] ifNone: [ nil ].^fechaS.! !!ViajeOrganizado methodsFor: 'funciones' stamp: 'VictoriaBugli 2/14/2024 21:22'!encontrarFechaSalida: unaFecha	| unaF |	unaF := nil.	colFechas ifNotEmpty: [		unaF := colFechas detect: [ :f | f esIgual: unaFecha ]ifNone: [ nil ] ].	^ unaF! !!ViajeOrganizado methodsFor: 'constructor' stamp: 'Victoria 1/19/2024 16:54'!inicializarColFechasSalida: unaColFechas duracion: unaDur colEtapas: unaColEtapas excursiones: colEx	excursionesOp := colEx.	colFechas  := unaColFechas.	duracion := unaDur.	colEtapas := unaColEtapas.	! !!ViajeOrganizado methodsFor: 'constructor' stamp: 'Victoria 1/19/2024 16:54'!inicializarColCupos: unaColFechas duracion: unaDur colEtapas: unaColEtapas excursiones: colEx	excursionesOp := colEx.	colFechas := unaColFechas.	duracion := unaDur.	colEtapas := unaColEtapas.	! !!ViajeOrganizado methodsFor: 'constructor' stamp: 'Victoria 1/19/2024 16:54'!inicializarNombre: nomb costoPorPersona: costo duracion: dura colFechas:= OrderedCollection new.duracion:=dura.nombre:= nomb.costoPorPersona:=costo.! !!ViajeOrganizado methodsFor: 'constructor' stamp: 'Victoria 1/19/2024 16:54'!inicializarDuracion: dura colFechas:= OrderedCollection new.colEtapas:= OrderedCollection new. excursionesOp := OrderedCollection new.duracion:=dura.! !!ViajeOrganizado methodsFor: 'constructor' stamp: 'Victoria 1/19/2024 16:54'!inicializarColFechas: unaColFechas duracion: unaDur colEtapas: unaColEtapas	excursionesOp := OrderedCollection new.	colFechas := unaColFechas.	duracion := unaDur.	colEtapas := unaColEtapas.	! !!ViajeOrganizado methodsFor: 'verificación' stamp: 'tony 7/31/2023 13:07'!esViajeOrganizado^true.! !!ViajeOrganizado methodsFor: 'verificación' stamp: 'Victoria 7/30/2023 18:01'!aplazarFechaSalida: unafechaSalida esDeSalida: esDeSalida^false.! !!ViajeOrganizado methodsFor: 'verificación' stamp: 'VictoriaBugli 2/18/2024 16:20'!validarCupoPersonas: unaCant enFecha: unaF	"Este método devuelve un boolean. Si es verdadero, es porque para la cantidad de personas del contrato hay cupo suficiente en este viaje."	| esSuficiente fechaSalida cupoFechaElegida |	esSuficiente := false.	fechaSalida := self obtenerFecha: unaF.	fechaSalida ifNotNil: [		cupoFechaElegida := fechaSalida getCupo.		esSuficiente := cupoFechaElegida >= unaCant.		esSuficiente ifTrue: [			fechaSalida setCupo: cupoFechaElegida - unaCant. 			self changed.] ].	^ esSuficiente! !!ViajeOrganizado methodsFor: 'verificación' stamp: 'Victoria 1/19/2024 16:54'!verificarFecha: unaFecha	|unCupo rta|	rta := false.	unCupo := colFechas detect:[:cadaCupo| cadaCupo verificarCupo: unaFecha] ifNone:[nil].		(unCupo isNotNil) ifTrue:[rta := true].	^rta.! !!ViajeOrganizado methodsFor: 'verificación' stamp: 'Victoria 1/19/2024 16:54'!tieneFechaEntre: fecha1 fecha2: fecha2|rta unCupo|rta := false.    unCupo := colFechas detect:[:cadaCupo| cadaCupo verificarFechaCupo: fecha1 fecha2: fecha2.] ifNone:[nil].    (unCupo isNotNil) ifTrue:[rta := true].    ^rta.! !!ViajeOrganizado methodsFor: 'verificación' stamp: 'Victoria 1/18/2024 19:00'!verificarNombre: nombreViaje"Método que verifca que un nombre es igual a otro, a partir de su nombre"^nombreViaje = nombre.! !!ViajeOrganizado methodsFor: 'getters' stamp: 'tony 7/30/2023 20:54'!obtenerCostoPorPersona ^costoPorPersona.! !!ViajeOrganizado methodsFor: 'getters' stamp: 'Anonymous 2/15/2024 15:35'!obtenerExcursion: nombreEx"Método que encuentra una excursión en un viaje organizado, a partir de su nombre"|unaEx|unaEx := excursionesOp detect: [: ex| ex esIgualExcursion: nombreEx. ] ifNone: [nil].^unaEx.! !!ViajeOrganizado methodsFor: 'getters' stamp: 'Anonymous 2/13/2024 16:53'!retornarFechaDeCupo	|coleccion|	coleccion := OrderedCollection new.	coleccion := colFechas collect: [:fecha| fecha getFechaSalida].	^coleccion.! !!ViajeOrganizado methodsFor: 'getters' stamp: 'Victoria 7/25/2023 10:51'!obtenerMillas    | sumMillas |    sumMillas := 0.    (costoPorPersona >= 20000 and: costoPorPersona <= 30000) ifTrue: [        sumMillas := cantMillas at: 1.    ] ifFalse: [        (costoPorPersona >= 30000 and: costoPorPersona <= 40000) ifTrue: [            sumMillas := cantMillas at: 2.        ] ifFalse: [            (costoPorPersona >= 40000 and: costoPorPersona <= 50000) ifTrue: [                sumMillas := cantMillas at: 3.            ] ifFalse: [                (costoPorPersona >= 50000 and: costoPorPersona <= 60000) ifTrue: [                    sumMillas := cantMillas at: 4.                ] ifFalse: [                    (costoPorPersona >= 60000 and: costoPorPersona <= 70000) ifTrue: [                        sumMillas := cantMillas at: 5.                    ] ifFalse: [                        (costoPorPersona >= 70000 and: costoPorPersona <= 80000) ifTrue: [                            sumMillas := cantMillas at: 6.                        ] ifFalse: [                            (costoPorPersona >= 80000 and: costoPorPersona <= 90000) ifTrue: [                                sumMillas := cantMillas at: 7.                            ] ifFalse: [                                (costoPorPersona >= 90000) ifTrue: [                                    sumMillas := cantMillas at: 8.                                ].                            ].                        ].                    ].                ].            ].        ].    ].    ^ sumMillas.! !!ViajeOrganizado methodsFor: 'getters' stamp: 'Victoria 7/25/2023 11:13'!obtenerMonto: nombreEx"Método que agrega el monto de la excursión al costo por persona del viaje"|montoExcursion excursion|montoExcursion:=0.excursion:= self encontrarExcursion: nombreEx.(excursion isNotNil) ifTrue:[	montoExcursion:= excursion getPrecio.	costoPorPersona:= montoExcursion + costoPorPersona.	].^montoExcursion. ! !!ViajeOrganizado methodsFor: 'getters' stamp: 'Anonymous 2/4/2024 17:13'!getFechas^ colFechas.! !!ViajeOrganizado methodsFor: 'getters' stamp: 'VictoriaBugli 2/8/2024 23:57'!toString	| mensaje datos |	mensaje := super toString.	mensaje := mensaje , 'Fechas de salida: '.	colFechas do: [ :fecha |		mensaje := mensaje , fecha toString, ' / ' ].	datos := self imprimirEtapasYExcursiones.	mensaje := mensaje , String crlf , 'Duración: ' , duracion asString	           , String crlf.	mensaje := mensaje , datos.	^ mensaje! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'Anonymous 1/15/2024 19:05'!agregarExcursiones: colExcursiones"Método que agrega una colección de excursiones al viaje organizado."excursionesOp := colExcursiones.! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'Anonymous 2/15/2024 14:51'!agregarExcursionOpcional: unaExcursion	"Método que añade una nueva excursión al viaje organizado si es que no la tiene ya cargada."	|noContiene exito |	noContiene := false.	exito := false.	noContiene := (self encontrarExcursion: unaExcursion) isNil.	noContiene		ifTrue: [			excursionesOp add: unaExcursion.			self agregarMonto: unaExcursion.			exito := true.			excursionesOp changed.			self changed. ]		ifFalse: [ exito := false ].	^ exito! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'VictoriaBugli 1/24/2024 18:11'!imprimirEtapasYExcursiones	| datos |	datos := ''.	colEtapas do: [ :et | datos := datos , et toString ].	excursionesOp do: [ :ex | datos := datos , ex toString].	^ datos! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'VictoriaBugli 2/14/2024 21:16'!encontrarExcursion: Ex	"Método que encuentra una excursión en un viaje organizado, a partir de su nombre"	| unaEx |	unaEx := nil.	excursionesOp ifNotEmpty: [		unaEx := excursionesOp detect: [ :ex | ex esIgual: Ex ] ifNone: [nil]].	^ unaEx! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'VictoriaBugli 2/19/2024 08:13'!agregarMonto: unaEx	"Método que agrega el monto de la excursión al costo por persona del viaje"	| montoExcursion |	montoExcursion := 0.	montoExcursion := unaEx getPrecio.	costoPorPersona := montoExcursion asNumber + costoPorPersona asNumber.	self changed. ! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'Anonymous 2/15/2024 14:52'!agregarFechaDeSalida: unaFecha	| exito |	exito := (self encontrarFechaSalida: unaFecha) isNil.	exito		ifTrue: [ colFechas add: unaFecha. 			colFechas changed.			self changed. 			].		^ exito! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'Anonymous 2/15/2024 14:51'!agregarEtapaDiaLlegada: undia hotel: elHotel cantDias: unaCant tipoPension: pension actividades: colActs    "Método que agrega una etapa si la misma no existe en la colección de etapas"        | noExiste nuevaEtapa |    noExiste := self encontrarEtapaDiaLlegada: undia nombreHotel: elHotel.    noExiste ifTrue: [        nuevaEtapa := Etapa crearDiaLlegada: undia cantDias: unaCant hotel: elHotel tipoPension: pension listaActividades: colActs.        colEtapas add: nuevaEtapa. 		colEtapas changed.		self changed.    	].	    ^ noExiste.! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'VictoriaBugli 2/14/2024 20:57'!añadirExcursion: unaEx	excursionesOp add: unaEx.	^true.! !!ViajeOrganizado methodsFor: 'EtapaExcursion' stamp: 'tony 7/31/2023 13:12'!encontrarEtapaDiaLlegada: unDia nombreHotel: elHotel"Método que permite encontrar la etapa ingresada.Retorna verdadero si no la encuentra"|etapa|etapa:=colEtapas detect: [ :etapas| etapas esIgualDiaLlegada: unDia hotel:elHotel. ] ifNone: [ nil ].^etapa isNil.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeOrganizado class	instanceVariableNames: ''!!ViajeOrganizado class methodsFor: 'Constructor' stamp: 'Victoria 1/19/2024 11:30'!crearNombre: nomb costoPorPersona: costo duracion: dur|unViaje|unViaje:= self crearNombre: nomb costoPorPersona: costo.unViaje inicializarDuracion: dur.^unViaje.! !!ViajeOrganizado class methodsFor: 'Constructor' stamp: 'Victoria 1/11/2024 20:23'!crearNombre: unNom costoPorPersona: unCosto ColFechas: unaColFechas duracion: unaDur colEtapas: unaColEtapas excursiones: colEx|unViajeOrganizado|	unViajeOrganizado := self crearNombre: unNom costoPorPersona: unCosto. 	unViajeOrganizado inicializarColCupos: unaColFechas duracion: unaDur colEtapas: unaColEtapas excursiones: colEx.	^unViajeOrganizado.	! !!ViajeOrganizado class methodsFor: 'Constructor'!crearNombre: unNom costoPorPersona: unCosto ColFechas: unaColFechas duracion: unaDur colEtapas: unaColEtapas|unViajeOrganizado|	unViajeOrganizado := self crearNombre: unNom costoPorPersona: unCosto. 	unViajeOrganizado inicializarColFechas: unaColFechas duracion: unaDur colEtapas: unaColEtapas.	^unViajeOrganizado.	! !!ViajeOrganizado class methodsFor: 'Constructor' stamp: 'Victoria 7/31/2023 14:55'!crearNombre: unNom costoPorPersona: unCosto ColCupos: unaColFechas duracion: unaDur colEtapas: unaColEtapas excursiones: colEx|unViajeOrganizado|	unViajeOrganizado := self crearNombre: unNom costoPorPersona: unCosto. 	unViajeOrganizado inicializarColCupos: unaColFechas duracion: unaDur colEtapas: unaColEtapas excursiones: colEx.	^unViajeOrganizado.	! !Cliente subclass: #ViajeroFrecuente	instanceVariableNames: 'millas'	classVariableNames: ''	package: 'tpFinal-Modelo'!!ViajeroFrecuente methodsFor: 'constructor' stamp: 'VictoriaBugli 2/18/2024 22:09'!inicializar    dineroReembolso := 0.    millas := 0.! !!ViajeroFrecuente methodsFor: 'getters' stamp: 'tony 7/30/2023 16:04'!getMillas	^millas.! !!ViajeroFrecuente methodsFor: 'getters' stamp: 'tony 7/30/2023 16:31'!obtenerReembolsoCon: unContrato y: precioViaje	|elPrecio|	elPrecio := 0.	elPrecio := super obtenerReembolsoCon: unContrato y: precioViaje.	(millas >= 5 and: elPrecio > 0) ifTrue:[		elPrecio := elPrecio - (elPrecio * (10/100)).			millas := millas - 5.	].		^elPrecio.	! !!ViajeroFrecuente methodsFor: 'getters' stamp: 'Anonymous 1/26/2024 19:14'!toString	|mensaje|	mensaje := super toString.		mensaje := mensaje , ' millas: ' , millas asString.				^mensaje.		! !!ViajeroFrecuente methodsFor: 'verificación' stamp: 'tony 7/30/2023 14:02'!esViajeroFrecuente	^true.! !!ViajeroFrecuente methodsFor: 'Contratos' stamp: 'Anonymous 2/18/2024 21:22'!establecerColContratosRealizados: unaColcolContratosRealizados := unaCol.! !!ViajeroFrecuente methodsFor: 'Contratos' stamp: 'Anonymous 2/18/2024 21:24'!establecerColContratosPagos: colPagos conRealizados: colRealizados conAtrasados: colAtrasados(colPagos isEmpty)ifFalse:[	self establecerColContratosPagos: colPagos.	].(colRealizados isEmpty)ifFalse:[	self establecerColContratosRealizados: colRealizados.	].(colAtrasados isEmpty)ifFalse:[	self establecerColContratosAtrasados: colAtrasados.	].! !!ViajeroFrecuente methodsFor: 'Contratos' stamp: 'Anonymous 2/18/2024 21:22'!establecerColContratosAtrasados: unaColcolContratosAtrasados := unaCol.! !!ViajeroFrecuente methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/18/2024 22:09'!cancelarContrato: unContrato    |reembolso|    reembolso := super cancelarContrato: unContrato.    (reembolso > 0) ifTrue:[        self cambiarReembolso: 0.        self setMillas: reembolso.    ].    ^reembolso.! !!ViajeroFrecuente methodsFor: 'Contratos' stamp: 'Anonymous 2/18/2024 21:22'!establecerColContratosPagos: unaColcolContratosPagos := unaCol.! !!ViajeroFrecuente methodsFor: 'as yet unclassified' stamp: 'Anonymous 2/19/2024 19:46'!restarMillas: millasViaje	millas := millas - millasViaje.	self changed.! !!ViajeroFrecuente methodsFor: 'setters' stamp: 'tony 7/30/2023 18:20'!sumarMillas: viajeContratado	|cantMillas|	Viaje inicializarMillas.	cantMillas := viajeContratado obtenerMillas.	millas := millas + cantMillas.! !!ViajeroFrecuente methodsFor: 'initialization' stamp: 'VictoriaBugli 2/18/2024 22:10'!setMillas: unMonto    millas := millas+ (unMonto/100).    self changed.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ViajeroFrecuente class	instanceVariableNames: ''!!ViajeroFrecuente class methodsFor: 'constructor' stamp: 'tony 7/30/2023 16:02'!crearApellido: unApellido Dni: unDni datosContacto: unosDatos residencia: unaResi colContratos: unaCol preferencias: unasPrefe	|unViajero|	unViajero := super crearApellido: unApellido Dni: unDni datosContacto: unosDatos residencia: unaResi 	colContratos: unaCol preferencias: unasPrefe.	unViajero inicializar.	^unViajero.! !