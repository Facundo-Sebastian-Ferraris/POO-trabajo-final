SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion txt'	classVariableNames: ''	package: 'tpFinal-Vista'!!BotonAccion methodsFor: 'drawing' stamp: 'Anonymous 2/2/2024 15:16'!fillColor: aColor"Método que modifica el color de un botón"self 	useGradientFill; 		borderWidth: self height  /5; 		useRoundedCorners ;		color: aColor;		setBorderStyle: #complexRaised .! !!BotonAccion methodsFor: 'event handling' stamp: 'Anonymous 1/11/2024 19:20'!mouseAction: unBloquebloqueAccion := unBloque.! !!BotonAccion methodsFor: 'event handling' stamp: 'Anonymous 1/11/2024 19:20'!mouseUp: unEventosuper mouseUp: unEvento.bloqueAccion value.! !BotonAccion subclass: #BotonMostradorLista	instanceVariableNames: 'texto cartel cartelAbierto colorTxt'	classVariableNames: ''	package: 'tpFinal-Vista'!!BotonMostradorLista methodsFor: 'constructor' stamp: 'FacundoFerraris 2/16/2024 15:44'!inicializar: unaInstancia    dimension: unaDimension    posicion: unaPosicion    colorBoton: unColorB    colorLetra: unColorL    letraNegrita: enNegrita        cartelAbierto := false.    colorTxt := unColorL.    unaInstancia addDependent: self.        self        label: '';        extent: unaDimension;        position: unaPosicion;        fillColor: unColorB;        mouseAction: [self abrirCartel: unaInstancia ].        texto := StringMorph new.    texto        contents: unaInstancia mostrarEtiqueta;        font: (LogicalFont familyName: 'Source Sans Pro' pointSize: unaDimension y / 4);        color: unColorL.        enNegrita ifTrue: [texto emphasis: TextEmphasis bold emphasisCode.].        texto position: ((self center) - (texto extent // 2)).    self addMorph: texto.    self openInWorld.! !!BotonMostradorLista methodsFor: 'updating' stamp: 'FacundoFerraris 2/15/2024 15:09'!update: instanciaActualizada	| posicion |	texto contents: instanciaActualizada mostrarEtiqueta.	cartelAbierto ifFalse: [ ^ self ].	posicion := cartel position.	cartel delete.	self abrirCartel: instanciaActualizada.	cartel position: posicion.! !!BotonMostradorLista methodsFor: 'funciones' stamp: 'FacundoFerraris 2/16/2024 15:43'!abrirCartel: laInstancia    | mensaje |    "mensaje para visualizar cartel con el contenido"    cartelAbierto ifTrue: [cartel delete].    cartelAbierto := true.        cartel := (BorderedMorph new) color: self color.     mensaje := TextMorph new.        mensaje        contents: laInstancia toString;        position: cartel innerBounds origin + (20 @ 20);        color: colorTxt.        cartel        extent: mensaje extent;        addMorph: mensaje;        extent: cartel extent + (50 @ 50);        borderColor: self color;        borderWidth: 2;        addMorph: ((Morph new) extent: cartel extent; position: cartel innerBounds origin; color: Color transparent);        addMorph: ((BotonAccion newWithLabel: 'X')             color: Color red;             extent: 20 @ 20;             mouseAction: [cartelAbierto := false. cartel delete.];            position: cartel innerBounds origin + (cartel width - 25 @ 0));        openInWorld.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BotonMostradorLista class	instanceVariableNames: ''!!BotonMostradorLista class methodsFor: 'as yet unclassified' stamp: 'FacundoFerraris 2/15/2024 14:43'!crearBML: 	unaInstanciadimension:		unaDimensionposicion:			unaPosicioncolorBoton: 		unColorBcolorLetra:		unColorLletraNegrita:	enNegrita|btn|btn := self new.btn inicializar: 	unaInstanciadimension:		unaDimensionposicion:			unaPosicioncolorBoton: 		unColorBcolorLetra:		unColorLletraNegrita:	enNegrita.	^btn.! !BorderedMorph subclass: #EmpresaTurismoVisual	instanceVariableNames: 'miEmpresaTurismo xMain yMain posicionador estandarizador'	classVariableNames: ''	package: 'tpFinal-Vista'!!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/19/2024 19:26'!hacerContratoNuevo	| cantCuotas dni viaje unaCantPersonas unaFechaViaje nombreViaje logrado viajeNoNulo colClientes |	colClientes := miEmpresaTurismo getColClientes.	colClientes		ifNotEmpty: [			dni := self seleccionarEnListaClientes.			cantCuotas := UIManager default request:				              'Ingrese la cantidad de cuotas del contrato:'.			[ cantCuotas = '' ] whileTrue: [				cantCuotas := UIManager default request: 'Ingrese nuevamente.' ].			unaCantPersonas := UIManager default request:				                   'Ingrese la cantidad de personas que viajan:'.			[ unaCantPersonas = '' ] whileTrue: [				unaCantPersonas := UIManager default request:					                   'Ingrese nuevamente.' ].			nombreViaje := self seleccionarEnListaViajes.			(dni = 0 or:				 (nombreViaje isNil or:					  (cantCuotas isNil or: unaCantPersonas isNil)))				ifFalse: [					viaje := miEmpresaTurismo retornarViaje: nombreViaje asString.					viajeNoNulo := viaje isNotNil.					viajeNoNulo ifTrue: [						unaFechaViaje := self seleccionarEnListaFechasViaje: viaje.						logrado := miEmpresaTurismo							           generarContratoCon: dni asNumber							           unViaje: viaje							           cantPersonas: unaCantPersonas asNumber							           cantCuotas: cantCuotas asNumber							           fechaViaje: unaFechaViaje.						logrado = 1							ifTrue: [							self menuRespuesta: 'Se ha creado un nuevo contrato con éxito.' ]							ifFalse: [								logrado = 0									ifTrue: [										self menuRespuesta:											'Error al crear el contrato. Verifique la existencia del cliente solicitado.' ]									ifFalse: [										logrado = 2 ifTrue: [											self menuRespuesta: 'Contrato con éxito.'.											self												ventanaNotificacion:													'Cliente ascendido a viajero frecuente' , String crlf													, 'hizo/tenía un Viaje Org'												color: Color yellow ] ] ] ] ]				ifTrue: [ self menuRespuesta: 'Se ha cancelado tramite' ] ]		ifEmpty: [			self				ventanaNotificacion:				'NO HAY CLIENTES, NO ES POSIBLE HACER CONTRATOS.'				color: Color red ]! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'Anonymous 2/16/2024 18:42'!cancelarContratoFlexible|numContrato exito|numContrato := UIManager default request: 'Ingrese el ID del Contrato:'.[numContrato = '' or: numContrato = '0']whileTrue: [numContrato:= UIManager default request: 'Ingrese nuevamente.'.].(numContrato isNil) ifFalse:[	exito := miEmpresaTurismo cancelacion: numContrato asNumber.	(exito)		ifTrue:[		self menuRespuesta: 'Se ha cancelado con éxito el contrato flexible.'		]	ifFalse:[		self ventanaNotificacion: 'Error. No existe el cliente y/o el contrato no es flexible ó ya fue cancelado previamente.'color: Color red.		]]ifTrue:[self menuRespuesta: 'Se ha cancelado tramite'.].! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 20:54'!pagarCuotas	|numContrato dni devolucion cantCuotas colClientes|	colClientes := miEmpresaTurismo getColClientes.(colClientes) ifNotEmpty:[dni := self seleccionarEnListaClientes.numContrato := UIManager default request: 'Ingrese el ID del Contrato:'.[numContrato = '' or: numContrato = '0']whileTrue: [numContrato:= UIManager default request: 'Ingrese nuevamente.'.].cantCuotas:= UIManager default request: 'Ingrese la cantidad de cuotas a pagar del contrato:'.[cantCuotas = '' or: cantCuotas = '0']whileTrue: [cantCuotas:= UIManager default request: 'Ingrese nuevamente.'].(cantCuotas isNil or: (numContrato isNil or: dni = 0)) ifFalse:[devolucion := miEmpresaTurismo pagarCuotas: dni asNumber numeroContrato: numContrato asNumber  cantidadCuotas: cantCuotas asNumber.(devolucion = 0) ifTrue:[	self ventanaNotificacion: 'Cliente no válido. No existe el DNI dentro de la Empresa.'	color: Color red.]ifFalse:[	(devolucion = 1) ifTrue:[		self menuRespuesta: 'Se pudo pagar con éxito la/s ',  cantCuotas asString ,' cuotas. '.		]	ifFalse:[		(devolucion = 2) ifTrue:[			self ventanaNotificacion: 'Se pagaron las cuotas y el contrato quedó completamente pago. Es posible efectivizar el contrato.' color: Color green.		]		ifFalse:[			(devolucion = 3) ifTrue:[				self ventanaNotificacion:'Error. No existe el contrato para ese cliente.' color: Color red.			]			ifFalse:[				(devolucion = 4) ifTrue:[					self ventanaNotificacion:'La fecha de vencimiento ya caducó, el contrato estará marcado como atrasado.'color: Color red.					]				ifFalse:[					(devolucion = 5) ifTrue:[						self ventanaNotificacion:'La cantidad de cuotas ingresadas son mayores a las totales. Intente de nuevo.'color: Color red.							]					ifFalse:[						self ventanaNotificacion:'Contrato ya cancelado, no se puede pagar.'color: Color red.						].												]							]			].		].	].] ifTrue:[self menuRespuesta: 'Se ha cancelado tramite'.].]ifEmpty:[		self ventanaNotificacion: 'NO HAY CLIENTES, NO ES POSIBLE PAGAR CONTRATOS.' color: Color red.		].	  			 ! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/16/2024 19:25'!efectivizarContrato	| numContrato devolucion |	numContrato := UIManager default request:		               'Ingrese el ID del Contrato:'.	[ numContrato = '' or: numContrato = '0' ] whileTrue: [		numContrato := UIManager default request: 'Ingrese nuevamente.' ].	numContrato isNil		ifFalse: [			devolucion := miEmpresaTurismo efectivizacion: numContrato asNumber.			devolucion = 0				ifTrue: [					self						ventanaNotificacion:						'Cliente no válido. No existe el DNI dentro de la Empresa/ ID contrato no válido.'						color: Color red ]				ifFalse: [					devolucion = 1						ifTrue: [							self								ventanaNotificacion:								'El contrato se ha efectivizado con éxito, estará marcado como realizado.'								color: Color green ]						ifFalse: [							devolucion = 2								ifTrue: [									self										ventanaNotificacion:										'El contrato tiene viaje nulo. No se puede efectivizar.'										color: Color red ]								ifFalse: [									devolucion = 3										ifTrue: [											self												ventanaNotificacion:												'El contrato no esta pagado en su totalidad. No se puede efectivizar.'												color: Color red ]										ifFalse: [											devolucion = 4												ifTrue: [													self														ventanaNotificacion:														'La fecha de hoy supera a la fecha del viaje ó a la de vencimiento del pago, por ende el contrato será marcado como atrasado.'														color: Color red ]												ifFalse: [													self														ventanaNotificacion:														'El contrato está pagado pero no se ha superado la fecha del viaje, por ende no se puede efectivizar. '														color: Color red ] ] ] ] ] ]		ifTrue: [ self menuRespuesta: 'Se ha cancelado tramite' ]! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'Anonymous 2/19/2024 19:05'!modificarContratoFlexible|numContrato dia mes anio unaFecha opcion devolucion colClientes|colClientes := miEmpresaTurismo getColClientes.(colClientes) ifNotEmpty:[numContrato := UIManager default request: 'Ingrese el ID del Contrato:'.[numContrato = '' or: numContrato = '0']whileTrue: [numContrato:= UIManager default request: 'Ingrese nuevamente.'.].anio := UIManager default request: 'Escriba el año del viaje:'.	[anio = '']	whileTrue: [anio:= UIManager default request: 'Ingrese nuevamente.'.].		mes := UIManager default request: 'Escriba el mes del viaje:'.	[mes =  '' or: (mes asNumber < 1 or: mes asNumber > 12)]	whileTrue: [mes:= UIManager default request: 'Ingrese nuevamente.'.].		dia := UIManager default request: 'Escriba el dia del viaje:'.	[dia = '' or: (dia asNumber > 31 or: dia asNumber < 1)]	whileTrue:[dia := UIManager default request: 'Ingrese nuevamente.' ].	opcion := UIManager default    chooseFrom: #('1' '0')    title: 'Cancelar contrato si no se tiene el suficiente Plus? (1 = Si, 0  = No)'.(numContrato isNil or:(opcion = 0 or: (anio isNil or: (mes isNil or: dia isNil)))) ifFalse:[unaFecha  := Date year: anio asNumber  month: mes asNumber  day: dia asNumber. devolucion := miEmpresaTurismo modificacionCon: numContrato asNumber fecha: unaFecha opcion: opcion asNumber.(devolucion = 0) ifTrue:[	self ventanaNotificacion: 'No se pudo hacer la modificación porque el contrato no es flexible y/ó contrato ya pago.' color: Color red.]ifFalse:[	(devolucion = 1) ifTrue:[		self ventanaNotificacion: 'Se hizo la modificación con éxito de la fecha del viaje. 'color: Color green.		]	ifFalse:[		(devolucion = 2) ifTrue:[			self ventanaNotificacion: 'No se hizo la modificación de la fecha del viaje debido a que no existe dentro del viaje.' color: Color red.		]		ifFalse:[			(devolucion = 3) ifTrue:[				self ventanaNotificacion: 'La modificación no se hizo, por lo tanto, se cancela el contrato flexible automaticamente.' color: Color red.			]			ifFalse:[				(devolucion = 4) ifTrue:[					self ventanaNotificacion: 'No se hizo la modificación de la fecha del viaje debido a que el plus es menor al costo.' color: Color red.						]				ifFalse:[					self ventanaNotificacion: 'No se hizo la modificación de la fecha del viaje debido a que el contrato ya está cancelado.' color: Color red.						]							]			].		].	].] ifTrue:[self menuRespuesta: 'Se ha cancelado tramite'.].]ifEmpty:[		self ventanaNotificacion: 'NO HAY CLIENTES, NO ES POSIBLE MODIFICAR CONTRATOS.' color: Color red.		].	  ! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'Anonymous 2/16/2024 18:43'!agregarExcursionOp|numContrato unaCantPersonas nombreExcursion devolucion colClientes|colClientes := miEmpresaTurismo getColClientes.(colClientes) ifNotEmpty:[numContrato := UIManager default request: 'Ingrese el ID del Contrato:'.[numContrato = '' or: numContrato = '0']whileTrue: [numContrato:= UIManager default request: 'Ingrese nuevamente.'.].unaCantPersonas := UIManager default request: 'Ingrese la cantidad de personas que participan de la excursión:'.[unaCantPersonas = '']whileTrue: [unaCantPersonas:= UIManager default request: 'Ingrese nuevamente.'.].nombreExcursion := UIManager default request: 'Ingrese el nombre de la excursión a añadir:'.[nombreExcursion = '']whileTrue: [nombreExcursion:= UIManager default request: 'Ingrese nuevamente.'.].(nombreExcursion isNil or: (unaCantPersonas isNil or: numContrato isNil)) ifFalse:[devolucion := miEmpresaTurismo agregarExcursion: numContrato asNumber  excursion: nombreExcursion asString cantAAplicar: unaCantPersonas asNumber. (devolucion = 0) ifTrue:[	self menuRespuesta: 'Número de contrato no válido.'	.]ifFalse:[	(devolucion = 1) ifTrue:[		self menuRespuesta: 'La excursión se añadió con éxito al contrato ' , numContrato asString, '.'.		]	ifFalse:[		(devolucion = 2) ifTrue:[			self ventanaNotificacion: 'La fecha de hoy es superior a la del viaje, no se puede cambiar el contrato.' color: Color red.		]		ifFalse:[			(devolucion = 3) ifTrue:[				self ventanaNotificacion: 'El viaje no es organizado y/o la cantidad de personas ingresada supera a la máxima por contrato.' color: Color red.			]			ifFalse:[				(devolucion = 4) ifTrue:[					self ventanaNotificacion: 'La excursión no existe dentro del viaje.' color: Color red.						].			].			].		].	].]ifTrue:[self menuRespuesta: 'Se ha cancelado tramite'.].] ifEmpty:[		self ventanaNotificacion: 'NO HAY CLIENTES, NO ES POSIBLE AGREGAR EXCURSIONES.' color: Color red.		].	 	 ! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'VictoriaBugli 2/19/2024 19:26'!hacerContratoFlexible	| cantCuotas dni viaje unaCantPersonas unaFechaViaje nombreViaje logrado viajeNoNulo plus colClientes |	colClientes := miEmpresaTurismo getColClientes.	colClientes		ifNotEmpty: [			dni := self seleccionarEnListaClientes.			cantCuotas := UIManager default request:				              'Ingrese la cantidad de cuotas del contrato:'.			[			cantCuotas isEmpty or: [				cantCuotas asNumber isNil or: [ cantCuotas asNumber < 1 ] ] ]				whileTrue: [					cantCuotas := UIManager default request:						              'Ingrese una cantidad válida (mayor o igual a 0).' ].			unaCantPersonas := UIManager default request:				                   'Ingrese la cantidad de personas que viajan:'.			[ unaCantPersonas = '' ] whileTrue: [				unaCantPersonas := UIManager default request:					                   'Ingrese nuevamente.' ].			nombreViaje := self seleccionarEnListaViajes.			(dni = 0 or:				 (nombreViaje isNil or:					  (cantCuotas isNil or: unaCantPersonas isNil)))				ifFalse: [					viaje := miEmpresaTurismo retornarViaje: nombreViaje asString.					viajeNoNulo := viaje isNotNil.					viajeNoNulo ifTrue: [						unaFechaViaje := self seleccionarEnListaFechasViaje: viaje.						plus := UIManager default request:							        'Escriba la cantidad de "Plus" que tiene:'.						[ plus = '' or: plus = '0' ] whileTrue: [							plus := UIManager default request: 'Ingrese nuevamente.' ].						logrado := miEmpresaTurismo							           generarContratoCon: dni asNumber							           unViaje: viaje							           cantPersonas: unaCantPersonas asNumber							           cantCuotas: cantCuotas asNumber							           fechaViaje: unaFechaViaje							           plus: plus asNumber.						logrado = 1							ifTrue: [							self menuRespuesta: 'Se ha creado un nuevo contrato con éxito.' ]							ifFalse: [								logrado = 0									ifTrue: [										self menuRespuesta:											'Error al crear el contrato. Verifique la existencia del cliente solicitado.' ]									ifFalse: [										logrado = 2 ifTrue: [											self menuRespuesta: 'Contrato con éxito.'.											self												ventanaNotificacion:													'Cliente ascendido a viajero frecuente' , String crlf													, 'hizo/tenía un Viaje Org'												color: Color yellow ] ] ] ] ]				ifTrue: [ self menuRespuesta: 'Se ha cancelado tramite' ] ]		ifEmpty: [			self				ventanaNotificacion:				'NO HAY CLIENTES, NO ES POSIBLE HACER CONTRATOS.'				color: Color red ]! !!EmpresaTurismoVisual methodsFor: 'Contratos' stamp: 'FacundoFerraris 2/16/2024 15:49'!hacerRecordatorioClientes	|colClientesRecordatorios mostrarL|		colClientesRecordatorios := miEmpresaTurismo revisarClienteContrato.		(colClientesRecordatorios ) ifNotEmpty:[	mostrarL := MostradorLista crearListaMostrador: colClientesRecordatorios  xMain: xMain*2  yMain: yMain/2  racion: 6  color1: Color orange  color2: Color orange darker darker darker  titulo: 'RECORDAR CONTRATOS A PUNTO DE VENCER A CLIENTES'  colorTitulo: Color black  colorBoton: Color orange  colorLetraBoton: Color black. ]ifEmpty:[		self ventanaNotificacion: 'NO HAY CLIENTES QUE NECESITEN SER RECORDADOS!!' color: Color red.		].	  			! !!EmpresaTurismoVisual methodsFor: 'initialization' stamp: 'FacundoFerraris 2/16/2024 14:02'!initialize|"Dimensiones del worldMorph"wMorphywMxwM|wMorph := WorldMorph currentWorld .ywM:= wMorph height .xwM:= wMorph width ."entorno de la interfaz:"super initialize.miEmpresaTurismo := EmpresaTurismo crearEmpresa.xMain := xwM/3.yMain := ywM*0.9.estandarizador := Estandarizador crearX: xMain Y: yMain  Dx1:1.5  Dy1:12  Dx2:10  Dy2:25.posicionador := Posicionador crearX: xMain Y: yMain. "main morph"self 	useGradientFill; 		borderWidth: self height  /5; 		useRoundedCorners ;		setBorderStyle: #complexRaised .self sorpresa: 'BIENVENIDO :)' .self extent: xMain@yMain.self position: 0@0.miEmpresaTurismo addDependent: self.self menuPrincipal.! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/18/2024 23:25'!tramitarViajeOrganizado: unaColeccion	"Genera datos básicos del viaje organizado. No lo añade a la empresa aún.Continua con formulario de fechas"	| nombreViajes costoViaje duracionDias viaje nombreValido costosValidos condiciones mensajeFallo |	duracionDias := (unaColeccion at: 2) asString.	costoViaje := (unaColeccion at: 3) asString.	nombreViajes := (unaColeccion at: 1) asString.	mensajeFallo := ''.	"Validar nombre del viaje"	nombreValido := (nombreViajes isNotEmpty and: [		                 nombreViajes isAllDigits not ]) and: [		                (miEmpresaTurismo tieneViaje: nombreViajes) not ].	nombreValido ifFalse: [		mensajeFallo := String crlf		                , 'Nombre no válido (puede que ya exista)'		                , String crlf ].	"Validar valores numéricos"	costosValidos := costoViaje isAllDigits and: duracionDias isAllDigits.	costosValidos ifTrue: [		costosValidos := costosValidos and:			                 (costoViaje asNumber > 0 and: [				                  duracionDias asNumber > 0 ]) ].	costosValidos ifFalse: [		mensajeFallo := mensajeFallo , 'Valores no válidos' , String crlf ].	condiciones := nombreValido and: costosValidos.	condiciones		ifTrue: [			viaje := ViajeOrganizado				         crearNombre: nombreViajes				         costoPorPersona: costoViaje asNumber				         duracion: duracionDias asNumber.				self formularioFechaSalida: viaje.			self				ventanaNotificacion:				'DATOS CARGADOS CON ÉXITO. CARGUE LOS CUPOS, ETAPAS, EXCURSIONES DEL VIAJE.'				color: Color green. ]		ifFalse: [ self ventanaNotificacion: mensajeFallo color: Color red ].	^ condiciones! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/19/2024 00:03'!tramitarFechaSalida: colInfo viaje: unViaje	| fechaS cupo cupoV fechaV exito mensajeFallo FechaS res fechaActual dif |	exito := false.	FechaS := nil.	fechaS := self validarFecha: (colInfo at: 1) asString.	cupo := (colInfo at: 2) asString.	fechaActual := fechaS julianDayNumber - Date today julianDayNumber	               >= 0.	dif := fechaS julianDayNumber - Date today julianDayNumber.	"Validar fecha de salida"	(fechaV := fechaS isKindOf: Date)		ifTrue: [			(fechaActual and: dif >= 0) ifFalse: [				mensajeFallo := 'Fecha de salida no actual' , String crlf ] ]		ifFalse: [		mensajeFallo := 'Fecha de salida no válida' , String crlf ].	"Validar cupo de la fecha"	(cupoV := cupo isAllDigits and: [ cupo asInteger > 0 ]) ifFalse: [		mensajeFallo := mensajeFallo , 'Cupo no válido' , String crlf ].(	(fechaV and: ( (fechaActual and: dif >= 0))) and: cupoV)		ifTrue: [			FechaS := FechaSalida				          crearConFechaSalida: fechaS				          unCupo: cupo asNumber.			exito := unViaje agregarFechaDeSalida: FechaS.			exito				ifTrue: [					self						ventanaNotificacion: 'FECHA AGREGADA EXITOSAMENTE'						color: Color green.					res := self mostrarDialogoSiNo:						       '¿Desea seguir cargando Fechas de Salida?'.					res						ifNotNil: [							res = 1 ifTrue: [ self formularioFechaSalida: unViaje ].							res = 2 ifTrue: [ self formularioEtapas: unViaje ] ]						ifNil: [						self ventanaNotificacion: 'OPERACIÓN CANCELADA' color: Color red ] ]				ifFalse: [					self						ventanaNotificacion: 'YA EXISTE LA FECHA INGRESADA'						color: Color red ] ]		ifFalse: [ self ventanaNotificacion: mensajeFallo color: Color red ].	^ exito! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/14/2024 15:06'!formularioViajeEspecial|formulario botonFormulario|formulario := (Formulario crearFormulario:#('Nombre del Viaje' 'Ciudad' 'Costo' 'Fecha Salida DD-MM-AAAA' 'Cupo Fecha Salida' 'Fecha Regreso DD-MM-AAAA' )  X:xMain  Y:yMain titulo: 'FORMULARIO VIAJE ESPECIAL')  .botonFormulario :=	self  	retornarBoton: 	'SUBIR'			extent: 			estandarizador btn2  			posicion: 		(formulario innerBounds origin + ((formulario width - estandarizador btn2_x)@(formulario height - estandarizador btn2_y))- 	(estandarizador btn2_x*0.5@estandarizador btn2_y*0.2))  			accion:[				(self tramitarViajeEspecial: formulario getColeccion)					ifTrue: 	[ 	formulario 	delete. ] 					ifFalse: [  	].				 ] 			color: Color red.formulario addMorph: botonFormulario .! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/14/2024 19:30'!formularioFechaSalida: unViaje	| formulario botonFormulario opcion |	formulario := Formulario		              crearFormulario:		              #( 'Fecha Salida DD-MM-AAAA' 'Cupo de la fecha ingresada ' )		              X: xMain		              Y: yMain		              titulo: 'FORMULARIO FECHA DE SALIDA'.	botonFormulario := self		                   retornarBoton: 'SUBIR'		                   extent: estandarizador btn2		                   posicion: formulario innerBounds origin			                   + (formulario width - estandarizador btn2_x				                    @ (formulario height - estandarizador btn2_y))			                   -			                   (estandarizador btn2_x * 0.5			                    @ estandarizador btn2_y * 0.2)		                   accion: [			                   (self				                    tramitarFechaSalida: formulario getColeccion				                    viaje: unViaje) ifTrue: [ formulario delete ] ifFalse: [ ]]		                   color: Color red.	formulario addMorph: botonFormulario! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/16/2024 10:38'!generarInfoViajes: fecha1 y: fecha2	| mostrarL colViajesEntreF |	colViajesEntreF := OrderedCollection new.	colViajesEntreF := miEmpresaTurismo		                   colViajesEntreFechas: fecha1		                   fecha2: fecha2.(colViajesEntreF) ifNotEmpty:[	self ventanaNotificacion: 'LISTA DE VIAJES GENERADA CON ÉXITO!!' color: Color red.		mostrarL := MostradorLista		            crearListaMostrador: colViajesEntreF		            xMain: xMain		            yMain: yMain / 2		            racion: 6		            color1: Color pink		            color2: Color purple		            titulo: 'VIAJES'		            colorTitulo: Color black		            colorBoton: Color lightCyan		            colorLetraBoton: Color purple.]ifEmpty:[self ventanaNotificacion: 'NO HAY VIAJES ENTRE ESAS DOS FECHAS!!' color: Color red.	]		! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'FacundoFerraris 2/20/2024 18:13'!validarDNI: unDni|patron|patron := '\d{8}' asRegex .^patron matches: unDni.! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/18/2024 18:26'!tramitarExcursion: colInfo viaje: unViaje	| nombreEx costo costoV nombreExV exito mensajeFallo excursion res |	res := 0.	nombreEx := (colInfo at: 1) asString.	costo := (colInfo at: 2) asString.	exito := false.	costoV := true.	nombreExV := true.	mensajeFallo := ''.	excursion := nil.	"Validar nombre excursión"	(nombreEx isNotEmpty and: [ nombreEx isAllDigits not ]) ifFalse: [		mensajeFallo := String crlf , 'Nombre de excursión no válido'		                , String crlf.		nombreExV := false ].	"Validar costo"	(costo isAllDigits and: [ costo asInteger > 0 ]) ifFalse: [		mensajeFallo := mensajeFallo , 'Costo no válido' , String crlf.		costoV := false ].	(nombreExV and: costoV)		ifTrue: [			excursion := Excursion				             crearNombreExcursion: nombreEx				             costo: costo asNumber.			exito := unViaje agregarExcursionOpcional: excursion.			exito				ifTrue: [					self						ventanaNotificacion: 'EXCURSIÓN AGREGADA EXITOSAMENTE'						color: Color green.					res := self mostrarDialogoSiNo:						       '¿Desea seguir cargando Excursiones?'.					(res isNotNil and: [ res isKindOf: Number ])						ifTrue: [							res = 1								ifTrue: [									self formularioExcursiones: unViaje.									]								ifFalse: [									res = 2										ifTrue: [											exito := miEmpresaTurismo agregarViaje: unViaje.											exito												ifTrue: [ self cartelFinalizado ]												ifFalse: [													self														ventanaNotificacion: '¡VIAJE NO CREADO!! PRUEBE DE NUEVO'														color: Color red ].											 ]										ifFalse: [  ] ] ]						ifFalse: [ 	self														ventanaNotificacion: 'OPERACIÓN CANCELADA'														color: Color red  ] ]				ifFalse: [					self						ventanaNotificacion: 'YA EXISTE ESA EXCURSIÓN'						color: Color red ] ]		ifFalse: [ self ventanaNotificacion: mensajeFallo color: Color red ].	^ exito! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/19/2024 16:39'!tramitarEtapa: colInfo viaje: unViaje	| cantDias hotel pension act mensajeFallo cantDV diaLV colActs exito res hotelV pensionV actV numEtapa validarEtapa |	cantDias := (colInfo at: 1) asString.	hotel := (colInfo at: 2) asString.	pension := (colInfo at: 3) asString.	act := (colInfo at: 4) asString.	colActs := OrderedCollection new.	mensajeFallo := ''.	cantDV := true.	diaLV := true.	hotelV := true.	pensionV := true.	actV := true.	exito:=false.	numEtapa := unViaje numEtapa + 1.	validarEtapa := unViaje getDuracion >= numEtapa.	(hotel isNotEmpty and: [ hotel isAllDigits not ]) ifFalse: [		mensajeFallo := String crlf , 'Nombre de hotel no válido'		                , String crlf.		hotelV := false ].	(pension isNotEmpty and: [ pension isAllDigits not ]) ifFalse: [		mensajeFallo := String crlf , 'Tipo de pensión no válido'		                , String crlf.		pensionV := false ].	(act isNotEmpty and: [ act isAllDigits not ]) ifFalse: [		mensajeFallo := String crlf , 'Nombre de la actividad no válido'		                , String crlf.		actV := false ].	"Validar cantidad de días"	(cantDias isAllDigits and: [ cantDias asInteger > 0 ]) ifFalse: [		mensajeFallo := mensajeFallo , 'Cantidad de días no válida'		                , String crlf.		cantDV := false ].	"Validar todas las condiciones"	validarEtapa ifFalse: [		mensajeFallo := mensajeFallo		                , 'La etapa supera la duración del viaje'		                , String crlf ].	((((validarEtapa and: cantDV) and: pensionV) and: hotelV) and: actV)		ifTrue: [			colActs add: act.			exito := unViaje				         agregarEtapaDiaLlegada: numEtapa				         hotel: hotel				         cantDias: cantDias asInteger				         tipoPension: pension				         actividades: colActs.			exito				ifTrue: [					self						ventanaNotificacion: 'ETAPA AGREGADA EXITOSAMENTE'						color: Color green.					res := self mostrarDialogoSiNo: '¿Desea seguir cargando Etapas?'.					res						ifNotNil: [							res = 1 ifTrue: [ self formularioEtapas: unViaje ].							res = 2 ifTrue: [ self formularioExcursiones: unViaje ] ]						ifNil: [						self ventanaNotificacion: 'OPERACIÓN CANCELADA' color: Color red ] ]				ifFalse: [					self						ventanaNotificacion:						'NO FUE POSIBLE CREAR LA ETAPA (ETAPA YA EXISTENTE)'						color: Color red ] ]		ifFalse: [ self ventanaNotificacion: mensajeFallo color: Color red ].	^ exito! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/13/2024 18:00'!formularioInfoViajes|formulario botonFormulario|formulario := (Formulario crearFormulario:#('Fecha1 DD-MM-AAAA' 'Fecha2 DD-MM-AAAA' )  X:xMain  Y:yMain titulo: 'INGRESE EL RANGO DE FECHAS PARA VER VIAJES:')  .botonFormulario :=	self  	retornarBoton: 	'SUBIR'			extent: 			estandarizador btn2  			posicion: 		(formulario innerBounds origin + ((formulario width - estandarizador btn2_x)@(formulario height - estandarizador btn2_y))- 	(estandarizador btn2_x*0.5@estandarizador btn2_y*0.2))  			accion:[				(self tramitarInfoViajes: formulario getColeccion)					ifTrue: 	[ 	formulario 	delete. ] 					ifFalse: [  	].				 ] 			color: Color red.formulario addMorph: botonFormulario .! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'FacundoFerraris 2/20/2024 18:23'!formularioCliente|formulario botonFormulario|formulario := (Formulario crearFormulario:#('DNI' 'APELLIDO' 'PREFERENCIAS' 'RESIDENCIA' )  X:xMain  Y:yMain titulo: 'FORMULARIO CLIENTE').botonFormulario :=	self  	retornarBoton: 	'SUBIR'			extent: 			estandarizador btn2  			posicion: 		(formulario innerBounds origin + ((formulario width - estandarizador btn2_x)@(formulario height - estandarizador btn2_y))- 								(estandarizador btn2_x*0.5@estandarizador btn2_y*0.2))  			accion:[				(self tramitarCliente: formulario getColeccion)					ifTrue: 	[ 	formulario 	delete. ] 					ifFalse: [  ].				 ] 			color: Color red.formulario addMorph: botonFormulario .! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/14/2024 18:29'!formularioExcursiones: unViaje	| formulario boton |	formulario := Formulario		              crearFormulario: #( 'Nombre' 'Costo' )		              X: xMain		              Y: yMain		              titulo: 'CARGA DE EXCURSIÓN'.	boton := self		         retornarBoton: 'SUBIR'		         extent: estandarizador btn2		         posicion: formulario innerBounds origin			         + (formulario width - estandarizador btn2_x				          @ (formulario height - estandarizador btn2_y))			         -			         (estandarizador btn2_x * 0.5 @ estandarizador btn2_y * 0.2)		         accion: [			         (self				          tramitarExcursion: formulario getColeccion				          viaje: unViaje)				         ifTrue: [ formulario delete ]				         ifFalse: [  ] ]		         color: Color red.	formulario addMorph: boton! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'FacundoFerraris 2/20/2024 18:22'!tramitarCliente: coleccionDatos| exito dni apellido preferencias residencia mensajeFallo dniValido  apellidoValido preferenciasValidas residenciaValida|dni  				:= coleccionDatos at:1 .apellido  		:= coleccionDatos at:2 .preferencias 	:= coleccionDatos at:3 .residencia 		:= coleccionDatos at:4 .mensajeFallo := ''.dniValido := self validarDNI: dni.apellidoValido := self validarNombre: apellido .preferenciasValidas := self validarNombre: preferencias.residenciaValida := self validarNombre: residencia.dniValido ifFalse: [ mensajeFallo := mensajeFallo , 'dni INVALIDO', String crlf. ].apellidoValido ifFalse: [ mensajeFallo := mensajeFallo , 'apellido INVALIDO', String crlf. ].preferenciasValidas ifFalse: [ mensajeFallo := mensajeFallo , 'preferencias INVALIDO', String crlf. ].residenciaValida ifFalse: [ mensajeFallo := mensajeFallo , 'residencia INVALIDO', String crlf. ].exito:= dniValido and: (apellidoValido and:(preferenciasValidas and: residenciaValida )).exito ifTrue: [  exito := miEmpresaTurismo generarCliente: apellido asString dni: dni asNumber residencia: residencia asString contratos: (OrderedCollection new) preferencias: preferencias asString. 					(exito) ifTrue:[			self ventanaNotificacion: 'CLIENTE GENERADO EXITOSAMENTE' color: Color green. 			]	ifFalse:[			self ventanaNotificacion:'NO FUE POSIBLE CREAR CLIENTE (DNI YA EXISTENTE O MAL ESCRITO EL TIPO)' color: Color red. 	].]ifFalse: [self ventanaNotificacion: mensajeFallo color: Color red. ].^exito.! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/19/2024 16:17'!formularioEtapas: unViaje	| formulario boton |	formulario := Formulario		              crearFormulario:			              #(			                 'Cantidad de dias' 'Hotel' 'Tipo de pensión'			                 'Actividad' )		              X: xMain		              Y: yMain		              titulo: 'CARGA DE ETAPA'.	boton := self		         retornarBoton: 'SUBIR'		         extent: estandarizador btn2		         posicion: formulario innerBounds origin			         + (formulario width - estandarizador btn2_x				          @ (formulario height - estandarizador btn2_y))			         -			         (estandarizador btn2_x * 0.5 @ estandarizador btn2_y * 0.2)		         accion: [			         (self				          tramitarEtapa: formulario getColeccion				          viaje: unViaje)				         ifTrue: [ formulario delete ]				         ifFalse: [  ] ]		         color: Color red.	formulario addMorph: boton! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/13/2024 15:14'!formularioViajeOrganizado|formulario botonFormulario|formulario := (Formulario crearFormulario:#('Nombre del Viaje' 'Duracion (Dias)' 'Costo'   )  X:xMain  Y:yMain titulo: 'FORMULARIO VIAJE ORGANIZADO')  .botonFormulario :=	self  	retornarBoton: 	'SUBIR'			extent: 			estandarizador btn2  			posicion: 		(formulario innerBounds origin + ((formulario width - estandarizador btn2_x)@(formulario height - estandarizador btn2_y))- 	(estandarizador btn2_x*0.5@estandarizador btn2_y*0.2))  			accion:[				(self tramitarViajeOrganizado: formulario getColeccion)					ifTrue: 	[ 	formulario 	delete. ] 					ifFalse: [  	].				 ] 			color: Color red.formulario addMorph: botonFormulario .! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/13/2024 15:11'!ventanaNotificacion: msg color: unColor|gM |gM := GrowlMorph new.gM contents: msg;	contentsColor: Color black;	backgroundColor: unColor;	borderWidth: 10;	borderColor: Color black;	extent:0@250;	openInWorld.! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'VictoriaBugli 2/18/2024 22:48'!tramitarViajeEspecial: unFormulario    | nombreViaje costoViaje ciudad fechaSalida fechaRegreso viaje nombreValido fechasValidas valoresValidos condiciones mensajeFallo cupoF dif ObjfechaS fechaActual |        nombreViaje := (unFormulario at: 1) asString.    ciudad := (unFormulario at: 2) asString.    costoViaje := (unFormulario at: 3) asString.    fechaSalida := self validarFecha: (unFormulario at: 4) asString.    cupoF := (unFormulario at: 5) asString.    fechaRegreso := self validarFecha: (unFormulario at: 6) asString.    mensajeFallo := ''.    "Validar nombre del viaje"    nombreValido := (nombreViaje isNotEmpty and: [ nombreViaje isAllDigits not ]) and: [ (miEmpresaTurismo tieneViaje: nombreViaje) not ].    nombreValido ifFalse: [        mensajeFallo := String crlf                        , 'Nombre no válido (puede que ya exista)'                        , String crlf ].    "Validar fechas"    "Validar fecha Regreso > fecha Salida"    fechaActual := (fechaSalida julianDayNumber - (Date today) julianDayNumber) >=0 .    dif := fechaRegreso julianDayNumber - fechaSalida julianDayNumber.    fechasValidas := (fechaSalida isNotNil and: [ fechaRegreso isNotNil ]) and: (dif > 0 and: (fechaActual )).    fechasValidas ifFalse: [        mensajeFallo := mensajeFallo , 'Fechas mal ingresadas' , String crlf ].    "Validar valores numéricos"    valoresValidos := costoViaje isAllDigits and: cupoF isAllDigits.    valoresValidos ifTrue: [        valoresValidos := valoresValidos and:                          (costoViaje asNumber > 0 and: cupoF asNumber > 0) ].    valoresValidos ifFalse: [        mensajeFallo := mensajeFallo , 'Valores no válidos' , String crlf ].    fechasValidas ifTrue: [        ObjfechaS := FechaSalida                         crearConFechaSalida: fechaSalida                         unCupo: cupoF ].    "Comprobar todas las condiciones"    condiciones := (nombreValido and: fechasValidas) and: valoresValidos.    condiciones        ifTrue: [ "Crear y agregar el viaje especial si todas las condiciones son verdaderas"            viaje := ViajeEspecial                         crearNombre: nombreViaje asString                         costoPorPersona: costoViaje asNumber                         Ciudad: ciudad asString                         fechaSalida: ObjfechaS                          fechaRegreso: fechaRegreso.            miEmpresaTurismo agregarViaje: viaje.            self                ventanaNotificacion: 'Viaje especial cargado exitosamente'                color: Color green ]        ifFalse: [ "Mostrar notificación en caso de fallo"            self ventanaNotificacion: mensajeFallo color: Color red ].    ^ condiciones! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'FacundoFerraris 2/20/2024 18:16'!validarNombre: unNombre|patron|patron := '([A-Z][a-z]*)( [A-Z][a-z]*)*' asRegex.^patron matches: unNombre. ! !!EmpresaTurismoVisual methodsFor: 'formularios' stamp: 'Anonymous 2/16/2024 10:38'!tramitarInfoViajes: unFormulario	| fecha1 fecha2 fechasValidas mensajeFallo dif|	fecha1 		:= 	self validarFecha: ((unFormulario at: 1) asString ).	fecha2 	:= 	self validarFecha: ((unFormulario at: 2) asString ).		mensajeFallo := ''.		"Validar fechas"	fechasValidas := fecha1 isNotNil and: [fecha2 isNotNil].	mensajeFallo := mensajeFallo , 'Fechas mal ingresadas. Intente de nuevo.', String crlf.			"Comprobar la condición"	dif := fecha2 julianDayNumber - fecha1 julianDayNumber.	(fechasValidas and: (dif > 0)) ifTrue: [		"Crear y agregar el viaje especial si todas las condiciones son verdaderas"		self generarInfoViajes: fecha1  y: fecha2.			] ifFalse: [		"Mostrar notificación en caso de fallo"				self ventanaNotificacion: mensajeFallo color: Color red.	].	fechasValidas := fechasValidas and: (dif > 0).	^fechasValidas.! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'Anonymous 2/15/2024 15:46'!modificarViajeEspecial: unViaje	| disBtn_y disBtn_x origen |	self removeAllMorphs.	disBtn_y := 0 @ estandarizador btn1_y.	disBtn_x := estandarizador btn1_x / 2 @ 0.	origen := self innerBounds origin.	self		crearTituloCentro: 'Seleccione una opción sobre el VIAJE ESPECIAL:'		color: Color black.	self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.	self cargarDeleteYCollapse.	self		invocarBoton: 'Nombre'		extent: 150 @ 50		posicion: origen + (130 @ 60)		accion: [ self cambiarNombre: unViaje ]		color: (Color fromHexString: '#fff68f').	self		invocarBoton: 'Costo'		extent: 150 @ 50		posicion: origen + (130 @ 120)		accion: [ self cambiarCosto: unViaje ]		color: (Color fromHexString: '#98fb98').	self		invocarBoton: 'Fecha de Regreso'		extent: 150 @ 50		posicion: origen + (130 @ 180)		accion: [ self cambiarFechaRegreso: unViaje ]		color: (Color fromHexString: '#d8bfd8').	self		invocarBoton: 'Ciudad'		extent: 150 @ 50		posicion: origen + (130 @ 240)		accion: [ self cambiarCiudad: unViaje ]		color: (Color fromHexString: '#f08080').	self		invocarBoton: 'Volver'		extent: 150 @ 50		posicion: origen + (10 @ 500)		accion: [ self menuPrincipal ]		color: (Color fromHexString: '#ffdab9')! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'Anonymous 2/15/2024 15:46'!modificarOrganizado: unViaje	| disBtn_y disBtn_x origen |	self removeAllMorphs.	disBtn_y := 0 @ estandarizador btn1_y.	disBtn_x := estandarizador btn1_x / 2 @ 0.	origen := self innerBounds origin.	self		crearTituloCentro:		'Seleccione una opción sobre el VIAJE ORGANIZADO:'		color: Color black.	self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.	self cargarDeleteYCollapse.	self		invocarBoton: 'Nombre'		extent: 150 @ 50		posicion: origen + (130 @ 60)		accion: [ self cambiarNombre: unViaje ]		color: (Color fromHexString: '#fff68f').	self		invocarBoton: 'Costo'		extent: 150 @ 50		posicion: origen + (130 @ 120)		accion: [ self cambiarCosto: unViaje ]		color: (Color fromHexString: '#98fb98').	self		invocarBoton: 'Duración'		extent: 150 @ 50		posicion: origen + (130 @ 180)		accion: [ self cambiarDuracion: unViaje ]		color: (Color fromHexString: '#add8e6').	self		invocarBoton: 'Agregar fecha de Salida'		extent: 150 @ 50		posicion: origen + (130 @ 240)		accion: [ self agregarFechaDeSalida: unViaje ]		color: (Color fromHexString: '#d8bfd8').	self		invocarBoton: 'Agregar etapa'		extent: 150 @ 50		posicion: origen + (130 @ 300)		accion: [ self agregarEtapa: unViaje ]		color: (Color fromHexString: '#f08080').	self		invocarBoton: 'Agregar excursión'		extent: 150 @ 50		posicion: origen + (130 @ 360)		accion: [ self agregarExcursion: unViaje ]		color: (Color fromHexString: '#fff68f').	self		invocarBoton: 'Volver'		extent: 150 @ 50		posicion: origen + (10 @ 500)		accion: [ self menuPrincipal ]		color: Color lightGray! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'FacundoFerraris 2/16/2024 15:31'!menuContratos"Interfaz gráfica del menú de contratos, con opciones tales como: Agregar, cancelar,efectivizar o modificar un contrato. Pagar cuota/s de un contrato."|disBtn_ydisBtn_x|"elementos gráficos"self removeAllMorphs.disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 .self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.self crearTituloEsquinaSup: 'Menú de funciones de Contrato(Agregar,Cancelar,Modificar)' color: Color black.self crearTituloCentro: 'Seleccione una opción:' color: Color black." X: Cierra la pestaña."self 	cargarDeleteYCollapse ."Agregar Contrato: Crea un nuevo contrato de un cliente para la Empresa Turismo."self 	invocarBoton:  'Agregar Contrato'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y) - disBtn_x 		accion: 			[self menuAgregarContrato]		color: (Color fromHexString: '#02b81d').						"Cancelar Contrato Flexible: Permite cancelar el pago de un contrato de un cliente."		self 	invocarBoton:  'Cancelar Contrato Flexible' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*2) - disBtn_x 		accion: 			[self cancelarContratoFlexible]		color: (Color fromHexString: '#f0c82b').					"Modificar Contrato: Permite modificar la fecha del viaje de un contrato(mientras este disponible)."		self 	invocarBoton:  'Modificar Contrato Flexible' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*3) - disBtn_x 		accion: 			[ self modificarContratoFlexible]		color:(Color fromHexString: '#2be9f0').							"Pagar cuota/s de un contrato: Permite pagar la/s cuota/s de un contrato de un cliente."		self 	invocarBoton:  'Pagar cuota/s de un contrato' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*4) - disBtn_x 		accion: 			[ self pagarCuotas]		color: (Color fromHexString: '#f368f7').					"Efectivizar contrato: Permite dar por finalizado un contrato que ya fue pago y que su fecha de viaje ya pasó."		self 	invocarBoton:  'Efectivizar contrato' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*5) - disBtn_x 		accion: 			[ self efectivizarContrato]		color: (Color fromHexString: '#8b48f7').																							"Volver: Vuelve al menú principal."		self 	invocarBoton:  'Volver' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuPrincipal ]		color: (Color fromHexString: '#c98b20').																! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'Anonymous 2/13/2024 15:13'!seleccionTipoViaje|disBtn_ydisBtn_x|"elementos gráficos"self removeAllMorphs. disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 .self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.self crearTituloEsquinaSup: 'Agregar Viaje.' color: Color black.self crearTituloCentro: 'Seleccione una opción:' color: Color black." Variable or expression expected ->X: Cierra la pestaña."self 	cargarDeleteYCollapse .self 	invocarBoton:  'Viaje Especial'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*2) - disBtn_x 		accion: 			[self formularioViajeEspecial]		color: (Color fromHexString: '#a23efa'	).	self 	invocarBoton:  'Viaje Organizado' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*3) - disBtn_x 		accion: 			[self formularioViajeOrganizado]		color: (Color fromHexString: '#f0c82b').								"Volver ABM Contratos: Vuelve al menú de contratos."		self 	invocarBoton:  'Volver ABM Viajes' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuViajes ]		color:(Color fromHexString: '#c98b20').						! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'FacundoFerraris 2/16/2024 15:32'!menuAgregarContrato"Interfaz gráfica del menú para agregar un contrato, con opciones tales como: Agregar contrato flexible o común."|disBtn_ydisBtn_x|"elementos gráficos"self removeAllMorphs. disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 .self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.self crearTituloEsquinaSup: 'Agregar Contrato.' color: Color black.self crearTituloCentro: 'Seleccione una opción:' color: Color black." Variable or expression expected ->X: Cierra la pestaña."self 	cargarDeleteYCollapse .self 	invocarBoton:  'Contrato común'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*2) - disBtn_x 		accion: 			[self hacerContratoNuevo]		color: (Color fromHexString: '#a23efa'	).	self 	invocarBoton:  'Contrato Flexible' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*3) - disBtn_x 		accion: 			[self hacerContratoFlexible]		color: (Color fromHexString: '#f0c82b').								"Volver ABM Contratos: Vuelve al menú de contratos."		self 	invocarBoton:  'Volver ABM Contratos' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuContratos]		color:(Color fromHexString: '#c98b20').						! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'FacundoFerraris 2/16/2024 15:32'!menuRespuesta: titulo"Interfaz gráfica del menú de respuesta, indica si la operación se ha cumplido con éxito."|disBtn_ydisBtn_x|"elementos gráficos"self removeAllMorphs.disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 .self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.self crearTituloEsquinaSup: 'Respuesta.' color: Color black.self crearTituloCentro: titulo color: Color black." Variable or expression expected ->X: Cierra la pestaña."self 	cargarDeleteYCollapse .		"Volver ABM Contratos: Vuelve al menú de contratos."		self 	invocarBoton:  'Volver' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuPrincipal]		color: (Color fromHexString: '#c98b20').		! !!EmpresaTurismoVisual methodsFor: 'menus'!menuClientes"Interfaz gráfica del menú de clientes, con opciones tales como: Agregar, eliminar o modificar un cliente."|disBtn_ydisBtn_x|"elementos gráficos"self removeAllMorphs.disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 .self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.self crearTituloEsquinaSup: 'Menú de funciones de Cliente(Agregar,Eliminar,Modificar)' color: Color black.self crearTituloCentro: 'Seleccione una opción:' color: Color black.self cargarDeleteYCollapse ."Agregar Cliente: Crea un nuevo cliente/Viajero para la Empresa Turismo."self 	invocarBoton:  'Agregar Cliente/Viajero Frecuente'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y) - disBtn_x 		accion: 			[self formularioCliente]		color: (Color fromHexString: '#02b81d').							"Eliminar Cliente: Permite eliminar un cliente dentro de la Empresa Turismo."		self 	invocarBoton:  'Eliminar Cliente/Viajero Frecuente' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*2) - disBtn_x 		accion: 			[self eliminarCliente]		color: (Color fromHexString: '#d40808').						"Modificar Cliente: Permite modificar el apellido/preferencias o residencias de un cliente dentro de la Empresa Turismo."		self 	invocarBoton:  'Modificar Cliente' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*3) - disBtn_x 		accion: 			[self modificarCliente]		color: (Color fromHexString: '#ccbf0c').										"Volver: Vuelve al menú principal."		self 	invocarBoton:  'Volver' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuPrincipal ]		color: (Color fromHexString: '#c98b20').				! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'Anonymous 2/16/2024 11:36'!modViaje	| viaje nombre colViajes|	colViajes := miEmpresaTurismo getViajes.	(colViajes) ifNotEmpty:[	nombre := self seleccionarEnListaViajes.	viaje := miEmpresaTurismo obtenerViaje: nombre.	viaje		ifNotNil: [						viaje esViajeOrganizado				ifTrue: [ self modificarOrganizado: viaje ]				ifFalse: [ self modificarViajeEspecial: viaje ] ]	]	ifEmpty:[		self ventanaNotificacion: 'NO HAY VIAJES PARA MODIFICAR!!' color: Color red.		].	! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'FacundoFerraris 2/16/2024 15:48'!menuVisualizar"Interfaz gráfica del menú de visualización, con opciones tales como: Ver Viajes, Ver Clientes, Ver Contratos."|disBtn_ydisBtn_x|"elementos gráficos"self removeAllMorphs.disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 .self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.self crearTituloEsquinaSup: 'Menú de funciones para visualizar(Viajes,Clientes,Contratos)' color: Color black.self crearTituloCentro: 'Seleccione una opción:' color: Color black."X: Cierra la pestaña."self 	cargarDeleteYCollapse ."Agregar Contrato: Crea un nuevo contrato de un cliente para la Empresa Turismo."self 	invocarBoton:  'Ver Clientes'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y) - disBtn_x 		accion: 			[self verClientes]		color: Color cyan.						"Cancelar Contrato Flexible: Permite cancelar el pago de un contrato de un cliente."		self 	invocarBoton:  'Ver Viajes' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*2) - disBtn_x 		accion: 			[self verViajes]		color: Color green.						"Modificar Contrato: Permite modificar la fecha del viaje de un contrato(mientras este disponible)."		self 	invocarBoton:  'Ver Contratos' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*3) - disBtn_x 		accion: 			[self verContratos]		color: Color yellow.					"Volver: Vuelve al menú principal."		self 	invocarBoton:  'Volver' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuPrincipal ]		color: (Color fromHexString: '#c98b20').		! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'Anonymous 2/16/2024 10:22'!menuPrincipal"Interfaz gráfica del menú principal, con todas sus opciones."|disBtn_ydisBtn_x|disBtn_y := 0@ (estandarizador btn1_y) .disBtn_x := ((estandarizador btn1_x)/2) @0 ."elementos gráficos"self removeAllMorphs. self crearTituloEsquinaSup: 'SISTEMA EMPRESA TURISMO 1.0' color: Color black.self crearTituloCentro: 'Seleccione una opción:' color: Color black.self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white."X: Cierra la pestaña."self 	cargarDeleteYCollapse ."ABM Contratos: Agrega/Elimina/Modifica un contrato para un cliente dentro de la Empresa Turismo."self 	invocarBoton:  'ABM	Contratos'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y) - disBtn_x 		accion: 			[ self menuContratos ]		color: (Color fromHexString: '#02b81d').								"ABM Viajes: Agrega/elimina/modifica un viaje(organizado o especial) dentro de la Empresa Turismo."					self 	invocarBoton:  'ABM	Viajes' 		extent: 			(estandarizador btn1) "- (((estandarizador btn1_x)/2) @0) "		posicion: 		(self topCenter) +(disBtn_y*2) - disBtn_x 		accion: 			[ self menuViajes]		color: (Color fromHexString: '#02b81d').						"Clientes: Opciones relacionadas a los clientes de la empresa"		self 	invocarBoton: 	'ABM	Clientes'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(0@(estandarizador btn1_y*3))  - disBtn_x 		accion: 			[self menuClientes ]		color: (Color fromHexString: '#02b81d')."Información de viajes: Muestra los viajes entre dos fechas dadas."		self 	invocarBoton:  'Información de viajes' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) + (disBtn_y*4) - disBtn_x		accion: 			[self formularioInfoViajes]		color: (Color fromHexString: '#02b81d').		"Agrega una excursión opcional al contrato(debe existir en el viaje previamente)"		self 	invocarBoton: 	'Agregar excursión opcional a contrato'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(0@(estandarizador btn1_y*5))  - disBtn_x 		accion: 			[ self agregarExcursionOp ]		color: (Color fromHexString: '#02b81d').										"Contratos en vencimiento: Arma una lista con todos los clientes que tienen contratos próximos a vencer."		self 	invocarBoton:  'Clientes con contratos a vencer' 		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(disBtn_y*6) - disBtn_x 		accion: 			[ self hacerRecordatorioClientes]		color: (Color fromHexString: '#02b81d').						"Ver: Opciones relacionadas a visualizar las instancias de viajes,clientes,contratos dentro de la empresa"		self 	invocarBoton: 	'Ver'		extent: 			estandarizador btn1 		posicion: 		(self topCenter) +(0@(estandarizador btn1_y*7))  - disBtn_x 		accion: 			[self menuVisualizar]		color: (Color fromHexString: '#02b81d').													self 	openInWorld .! !!EmpresaTurismoVisual methodsFor: 'menus' stamp: 'Anonymous 2/15/2024 15:46'!menuViajes    | disBtn_y disBtn_x |    self removeAllMorphs.    disBtn_y := 0 @ estandarizador btn1_y.    disBtn_x := estandarizador btn1_x / 2 @ 0.	self crearTituloEsquinaInferior: 'Creado por Bugli, Ferraris, Sarmiento.' color: Color white.	self crearTituloCentro: 'Seleccione una opción:' color: Color black.    self cargarDeleteYCollapse .    self        invocarBoton: 'Agregar un viaje al catálogo'        extent: estandarizador btn1        posicion: self topCenter + disBtn_y - disBtn_x        accion: [ self seleccionTipoViaje ]        color: (Color fromHexString: '#02b81d').	    self        invocarBoton: 'Quitar un viaje del catálogo'        extent: estandarizador btn1        posicion: self topCenter + (disBtn_y * 2) - disBtn_x        accion: [ self borrarViaje ]        color: (Color fromHexString: '#d40808').	    self        invocarBoton: 'Modificar información sobre un viaje'        extent: estandarizador btn1        posicion: self topCenter + (disBtn_y * 3) - disBtn_x        accion: [ self modViaje ]        color: (Color fromHexString: '#ccbf0c').    self 	invocarBoton:  'Volver' 		extent: 			estandarizador btn1 		posicion: 		(self bottomCenter ) - (disBtn_y*2) - disBtn_x 		accion: 			[ self menuPrincipal ]		color: (Color fromHexString: '#c98b20').! !!EmpresaTurismoVisual methodsFor: 'Ver' stamp: 'FacundoFerraris 2/16/2024 15:37'!verViajes	|colViajes mostrarL|		colViajes := miEmpresaTurismo getViajes.(colViajes) ifNotEmpty:[				mostrarL := MostradorLista crearListaMostrador: colViajes  xMain: xMain  yMain: yMain/2  racion: 6  color1: Color green   color2: (Color fromHexString: '#5efc8d')     titulo: 'VIAJES'  colorTitulo: Color black  colorBoton: Color green  colorLetraBoton: Color black. ]ifEmpty:[		self ventanaNotificacion: 'NO HAY VIAJES PARA VER!!' color: Color red.		].	  			! !!EmpresaTurismoVisual methodsFor: 'Ver' stamp: 'FacundoFerraris 2/16/2024 15:34'!verClientes    | colClientes mostrarL |        colClientes := miEmpresaTurismo getColClientes.        (colClientes) ifNotEmpty: [        mostrarL := MostradorLista crearListaMostrador: colClientes                        xMain: xMain yMain: yMain / 2                          racion: 6                          color1: Color cyan  color2: (Color fromHexString: '#0c8ffa')                        titulo: 'CLIENTES' colorTitulo: Color black                         colorBoton: Color cyan colorLetraBoton: Color black.    ] ifEmpty: [        self ventanaNotificacion: 'NO HAY CLIENTES PARA VER!!' color: Color red.	    ].	  ! !!EmpresaTurismoVisual methodsFor: 'Ver' stamp: 'FacundoFerraris 2/16/2024 15:47'!verContratos    | dni colContratos opcion mostrarL |    mostrarL := ''.    dni := self seleccionarEnListaClientes.    opcion := UIManager default        chooseFrom: #('Contrato en curso' 'Contrato pago' 'Contrato realizado' 'Contrato atrasado')        title: 'Seleccione qué tipo de contratos desea ver:'.    colContratos := miEmpresaTurismo obtenerContratosCliente: dni asNumber opcion: opcion asNumber.    (colContratos) ifNotEmpty: [  		  mostrarL := MostradorLista crearListaMostrador: colContratos                        xMain: xMain yMain: yMain / 2                          racion: 6                          color1: Color yellow color2: (Color yellow darker darker darker)                         titulo: 'CONTRATOS' colorTitulo: Color black                         colorBoton: Color yellow colorLetraBoton: Color black.    ] ifEmpty: [        self menuRespuesta: 'Intente de nuevo.'	    ].! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/19/2024 16:06'!borrarViaje	| nombreViaje exito colViajes |	colViajes := miEmpresaTurismo getViajes.	nombreViaje := ''.	exito := 0.	colViajes		ifNotEmpty: [			nombreViaje := self seleccionarEnListaViajes.			exito := miEmpresaTurismo eliminarViaje: nombreViaje.			exito = 2 ifTrue: [				self					ventanaNotificacion:					'Viaje: ' , nombreViaje , ' eliminado con éxito'					color: Color yellow ].			exito = 1 ifTrue: [				self					ventanaNotificacion: 'Viaje: ' , nombreViaje						, ' tiene contratos asociados. ¡NO se puede eliminar!!'					color: Color red ].			exito = 0 ifTrue: [				self					ventanaNotificacion:					'Viaje: ' , nombreViaje , ' NO eliminado con éxito'					color: Color yellow ] ]		ifEmpty: [			self				ventanaNotificacion: 'NO HAY VIAJES PARA ELIMINAR!!'				color: Color red ]! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/15/2024 15:11'!agregarFechaDeSalida: unViaje	| fecha fechaSalida cupo exito |		fecha := self cargarDateSalida.	cupo := UIManager default			         request: 'Ingrese el cupo de la fecha'.[ cupo = 0  ] whileTrue: [		cupo := UIManager default request: 'Ingrese el cupo de la fecha'].	fechaSalida := FechaSalida crearConFechaSalida: fecha unCupo: cupo asNumber.	exito := unViaje agregarFechaDeSalida: fechaSalida.	exito		ifTrue: [ self cartel: '¡Fecha cargada exitosamente!!' ]		ifFalse: [ self cartel: '¡La fecha ya existe o no es válida!!' ]! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 20:13'!cambiarCiudad: unViaje	| ciudad |	ciudad := ''.	[ ciudad isEmpty or: [ ciudad asString isAllDigits ] ] whileTrue: [		ciudad := (UIManager default			           request: 'Ingrese el nombre de la ciudad'			           initialAnswer: '') asString ].	unViaje setCiudad: ciudad.	self cartel: '¡Ciudad cambiada con éxito!!'.! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/14/2024 21:37'!cartelFinalizado	| borderedMorph bCerrar bContinuar |	borderedMorph := BorderedMorph new.	borderedMorph borderColor: Color black. "Color del borde"	borderedMorph borderWidth: 2. "Ancho del borde"	borderedMorph color: Color yellow.	"Crear un título"	borderedMorph addMorph: (TextMorph new			 contents: '¡Carga de viaje finalizada!!';			 color: Color black;			 position: borderedMorph innerBounds origin + (40 @ 10)).	"Crear el contenido del cartel"	bCerrar := BotonAccion new.	bCerrar label: 'Cerrar'.	bCerrar color: Color red.	bCerrar mouseAction: [ borderedMorph delete ].	bContinuar := BotonAccion new.	bContinuar label: 'Volver'.	bContinuar color: Color green.	bContinuar mouseAction: [		borderedMorph delete.		self menuPrincipal ].	borderedMorph addMorph: bCerrar.	bCerrar position: borderedMorph innerBounds origin + (10 @ 40).	borderedMorph addMorph: bContinuar.	bContinuar position: borderedMorph innerBounds origin + (60 @ 40).	"Establecer el tamaño del BorderedMorph"	borderedMorph extent: 200 @ 100. "Ajusta las dimensiones según tus necesidades"	borderedMorph openInWorld! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 20:14'!cartel: mensaje	| borderedMorph bCerrar bContinuar |	borderedMorph := BorderedMorph new.	borderedMorph borderColor: Color black. "Color del borde"	borderedMorph borderWidth: 2. "Ancho del borde"	borderedMorph color: Color yellow.	"Crear un título"		borderedMorph addMorph: (TextMorph new			 contents: mensaje;			 color: Color black;			 position: borderedMorph innerBounds origin + (40 @ 10)).	"Crear el contenido del cartel"	bCerrar := BotonAccion new.	bCerrar label: 'Cerrar'.	bCerrar color: Color red.	bCerrar mouseAction: [ borderedMorph delete ].	bContinuar := BotonAccion new.	bContinuar label: 'Volver a menú'.	bContinuar color: Color green.	bContinuar mouseAction: [		borderedMorph delete.		self menuPrincipal ].	borderedMorph addMorph: bCerrar.	bCerrar position: borderedMorph innerBounds origin + (10 @ 40).	borderedMorph addMorph: bContinuar.	bContinuar position: borderedMorph innerBounds origin + (60 @ 40).	"Establecer el tamaño del BorderedMorph"	borderedMorph extent: 300 @ 100. "Ajusta las dimensiones según tus necesidades"	borderedMorph openInWorld! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/19/2024 18:44'!cambiarCosto: unViaje	| costo |	"Solicitar al usuario que ingrese el nuevo costo del viaje"	costo := UIManager default request:		         'Ingrese el nuevo costo del viaje'.	"Repetir la solicitud mientras el usuario ingrese una cadena vacía o un valor no numérico"	[	costo isAllDigits not or: [		costo asNumber isNil or: [ costo asNumber <  0  or: costo asNumber =  0 ] ] ] whileTrue: [		costo := UIManager default request:			         'Ingrese un valor válido (mayor a 0).' ].	"Establecer el nuevo costo en el objeto Viaje"	unViaje setCosto: costo asNumber.	miEmpresaTurismo modificarPrecioContrato: unViaje.	"Mostrar un cartel indicando que se realizó el cambio de costo"	self cartel: '¡Cambio de costo realizado!!'! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 20:12'!cargarDate|anio dia mes fecha|"Método que permite ingresar una fecha y la retorna"anio := UIManager default request: 'Escriba el año de la llegada de la etapa:'.	[anio = '']	whileTrue: [anio:= UIManager default request: 'Ingrese nuevamente.'.].		mes := UIManager default request: 'Escriba el mes de la llegada de la etapa:'.	[mes =  '' or: (mes asNumber < 1 or: mes asNumber > 12)]	whileTrue: [mes:= UIManager default request: 'Ingrese nuevamente.'.].		dia := UIManager default request: 'Escriba el dia de la llegada de la etapa:'.	[dia = '' or: (dia asNumber > 31 or: dia asNumber < 1)]	whileTrue:[dia := UIManager default request: 'Ingrese nuevamente.' ]	.	fecha := Date year: anio asNumber  month: mes asNumber  day: dia asNumber.	^fecha.! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/14/2024 19:22'!mostrarDialogoSiNo: mensaje	| respuesta |	"Mostrar un cuadro de diálogo con dos opciones: Sí y No"	respuesta := UIManager default		             chooseFrom: #( 'Sí' 'No' )		             title: mensaje.	"Retornar la respuesta del usuario"	^respuesta.! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/15/2024 15:04'!agregarExcursion: unViaje	| nombreE costo ex exito |	nombreE := ''.	costo := 0.	[ nombreE isEmpty or: [ nombreE asString isAllDigits ] ] whileTrue: [		nombreE := (UIManager default			            request: 'Ingrese el nombre de la excursión'			            initialAnswer: '') asString ].	[ costo = 0 or: costo < 0 ] whileTrue: [		costo := (UIManager default			          request: 'Ingrese el costo por persona'			          initialAnswer: '') asInteger ].	ex := Excursion crearNombreExcursion: nombreE costo: costo asNumber.	exito:= unViaje agregarExcursionOpcional: ex.	exito ifTrue: [self cartel: '¡Excursión cargada exitosamente!!' ] ifFalse: [ self cartel: '¡La excursión ya existe o no es válida!!' ].! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/18/2024 14:22'!agregarEtapa: unViaje	| diaLleg cantD hotel pension actividad listaActividades exito |	diaLleg := ''.	cantD := 0.	hotel := ''.	pension := ''.	actividad := ''.	listaActividades := OrderedCollection new.	[ diaLleg isEmpty or: (unViaje tieneEtapaEnDia: diaLleg) ] whileTrue: [		diaLleg := (UIManager default request:			            'Ingrese el día de la etapa en formato: dia1,dia2..')			           asString ].	[ cantD <= 0 ] whileTrue: [		cantD := (UIManager default request: 'Ingrese la cantidad de días')			         asInteger ].	[ hotel isEmpty ] whileTrue: [		hotel := (UIManager default request: 'Ingrese el nombre del hotel')			         asString ].	[ pension isEmpty ] whileTrue: [		pension := (UIManager default request: 'Ingrese el tipo de pensión')			           asString ].	[ actividad isEmpty ] whileTrue: [		actividad := (UIManager default request: 'Ingrese la actividad')			             asString ].	listaActividades add: actividad.	exito := miEmpresaTurismo		         agregarEtapaEmpresa: unViaje		         diaLlegada: diaLleg		         hotel: hotel		         cantDias: cantD asNumber		         pension: pension		         actividades: listaActividades.	exito		ifTrue: [ self cartel: '¡Etapa cargada con éxito!!' ]		ifFalse: [ self cartel: '¡La etapa ya existe o datos no válidos!!' ]! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/16/2024 17:55'!cambiarNombre: unViaje	| nombreViaje exito |	nombreViaje := nil.	nombreViaje := UIManager default request:		               'Ingrese el nombre del viaje:'.   	[nombreViaje = '' or:		(miEmpresaTurismo tieneViaje: nombreViaje asString)         ] whileTrue: [		nombreViaje := UIManager default request: 'Ingrese nuevamente.' ].	nombreViaje isNil		ifTrue: [ self cartel: '¡Cambio no realizado!!' ]		ifFalse: [			exito := miEmpresaTurismo				         modificarViaje: unViaje				         nombre: nombreViaje asString.			exito				ifTrue: [ self cartel: '¡Cambio de nombre realizado!!' ]				ifFalse: [ self cartel: '¡Cambio no realizado!!' ] ]! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/8/2024 18:12'!cargarDateSalida|anio dia mes fecha|"Método que permite ingresar una fecha y la retorna"anio := UIManager default request: 'Escriba el año de la fecha de Salida :'.	[anio = '']	whileTrue: [anio:= UIManager default request: 'Ingrese nuevamente.'.].		mes := UIManager default request: 'Escriba el mes de la fecha de Salida :'.	[mes =  '' or: (mes asNumber < 1 or: mes asNumber > 12)]	whileTrue: [mes:= UIManager default request: 'Ingrese nuevamente.'.].		dia := UIManager default request: 'Escriba el dia de la Salida :'.	[dia = '' or: (dia asNumber > 31 or: dia asNumber < 1)]	whileTrue:[dia := UIManager default request: 'Ingrese nuevamente.' ]	.	fecha  := Date year: anio asNumber  month: mes asNumber  day: dia asNumber.		^fecha.   ! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/13/2024 16:45'!seleccionarEnListaFechasViaje: unViaje|colFechas opcion laFecha|colFechas := (unViaje retornarFechaDeCupo).		opcion := UIManager default			chooseFrom:colFechas message: 'Seleccione la fecha de salida del viaje:'.laFecha := self recuperarVar: opcion asNumber de: colFechas.^laFecha.! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/16/2024 10:19'!cambiarFechaRegreso: unViaje	| anio dia mes fecha fechaSalida|	"Método que permite ingresar una fecha y la retorna"	anio := UIManager default request:		        'Escriba el año de la fecha del regreso:'.	[ anio = '' ] whileTrue: [		anio := UIManager default request: 'Ingrese nuevamente.' ].	mes := UIManager default request:		       'Escriba el mes de la fecha del regreso:'.	[ mes = '' or: (mes asNumber < 1 or: mes asNumber > 12) ] whileTrue: [		mes := UIManager default request: 'Ingrese nuevamente.' ].	dia := UIManager default request: 'Escriba el dia del regreso:'.	[ dia = '' or: (dia asNumber > 31 or: dia asNumber < 1) ] whileTrue: [		dia := UIManager default request: 'Ingrese nuevamente.' ].	fecha := Date		         year: anio asNumber		         month: mes asNumber		         day: dia asNumber.	fechaSalida := unViaje obtenerFechaSalida.	(fechaSalida > fecha) ifTrue:[		self cartel: 'No válido.'.		]	ifFalse:[		unViaje setFechaRegreso: fecha.	self cartel: 'Fecha de regreso cambiada'.	].! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 20:11'!cargarDateRegreso|anio dia mes fecha|"Método que permite ingresar una fecha y la retorna"anio := UIManager default request: 'Escriba el año de la fecha del regreso:'.	[anio = '']	whileTrue: [anio:= UIManager default request: 'Ingrese nuevamente.'.].		mes := UIManager default request: 'Escriba el mes de la fecha del regreso:'.	[mes =  '' or: (mes asNumber < 1 or: mes asNumber > 12)]	whileTrue: [mes:= UIManager default request: 'Ingrese nuevamente.'.].		dia := UIManager default request: 'Escriba el dia del regreso:'.	[dia = '' or: (dia asNumber > 31 or: dia asNumber < 1)]	whileTrue:[dia := UIManager default request: 'Ingrese nuevamente.' ]	.	fecha := Date year: anio asNumber  month: mes asNumber  day: dia asNumber.	^fecha.! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'Anonymous 2/1/2024 20:13'!cambiarDisponibilidad: unViaje	| disponibilidad |	disponibilidad := ''.	[ disponibilidad isEmpty or: [ disponibilidad asString isAllDigits ] ]		whileTrue: [			disponibilidad := (UIManager default				                   request: 'Ingrese la disponibilidad'				                   initialAnswer: '') asString ].	unViaje setDisponibilidad: disponibilidad.	self cartel: '¡Disponibilidad cambiada con éxito!!'.	! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/19/2024 16:55'!cambiarDuracion: unViaje	| duracion verifEtapas |	"Solicitar al usuario que ingrese la nueva duración del viaje"	duracion := UIManager default request:		            'Ingrese la nueva duración del viaje'.	"Repetir la solicitud mientras el usuario ingrese una cadena vacía o un valor no numérico"	[ "debemos verificar que no supere la cantidad de etapas"	(verifEtapas := duracion asNumber >= unViaje numEtapa) not or: [		duracion isAllDigits not or: [			duracion asNumber isNil or: [ duracion asNumber < 0 ] ] ] ]		whileTrue: [			duracion := UIManager default request:				            'Ingrese una duración válida (mayor o igual a 0 y menor o igual al número de etapas).' ].	"Establecer la nueva duración en el objeto Viaje"	unViaje setDuracion: duracion asNumber.	"Mostrar un cartel indicando que se realizó el cambio de duración"	self cartel: '¡Cambio de duración realizado!!'! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'FacundoFerraris 2/16/2024 16:09'!seleccionarEnListaViajes|colViajes opcion elNombre|colViajes := OrderedCollection new.elNombre := nil.	(miEmpresaTurismo getViajes) do: [ :v| colViajes add: (v getNombre)].		opcion := UIManager default			chooseFrom:colViajes message: 'Seleccione el viaje según su nombre'.			(opcion =0) ifFalse:[elNombre := self recuperarVar: opcion asNumber de: colViajes.].^elNombre.! !!EmpresaTurismoVisual methodsFor: 'Viajes' stamp: 'VictoriaBugli 2/8/2024 18:09'!cargarDateFechaSalida|anio dia mes fecha fechaS cupo|"Método que permite ingresar una fecha de salida con cupo"anio := UIManager default request: 'Escriba el año de la fecha de Salida :'.	[anio = '']	whileTrue: [anio:= UIManager default request: 'Ingrese nuevamente.'.].		mes := UIManager default request: 'Escriba el mes de la fecha de Salida :'.	[mes =  '' or: (mes asNumber < 1 or: mes asNumber > 12)]	whileTrue: [mes:= UIManager default request: 'Ingrese nuevamente.'.].		dia := UIManager default request: 'Escriba el dia de la Salida :'.	[dia = '' or: (dia asNumber > 31 or: dia asNumber < 1)]	whileTrue:[dia := UIManager default request: 'Ingrese nuevamente.' ].		cupo := UIManager default request: 'Ingrese el cupo:'.	[cupo = '' or: (cupo asNumber < 1)]	whileTrue:[cupo := UIManager default request: 'Ingrese un cupo nuevamente.' ].		fecha  := Date year: anio asNumber  month: mes asNumber  day: dia asNumber.		fechaS := FechaSalida crearConFechaSalida: fecha unCupo: cupo. ^fechaS.! !!EmpresaTurismoVisual methodsFor: 'metodosFechas' stamp: 'Anonymous 2/13/2024 15:15'!validarFecha: aString    | fecha components condicion |    fecha := nil.    [         components := aString findTokens: '-'.        condicion := components size = 3.                condicion            ifTrue: [                condicion := condicion and: (components first isAllDigits and: (components second isAllDigits  and: components third isAllDigits)).                condicion ifTrue: [                     | dia mes anio |                    dia := components first asInteger.                    mes := components second asInteger.                    anio := components third asInteger.                                        fecha := Date newDay: dia month: mes year: anio.                ]            ]            ifFalse: [ fecha := nil ].    ]     on: Error     do: [ :error |        fecha := nil.    ].    ^fecha.! !!EmpresaTurismoVisual methodsFor: 'metodosFechas' stamp: 'Anonymous 2/1/2024 20:08'!obtenerFecha: num	| anio dia mes fecha |	"Método que permite ingresar una fecha y la retorna"		anio := UIManager default request:		        'Ingrese el año de la fecha :' , num asString.	[ anio = '' ] whileTrue: [		anio := UIManager default request: 'Ingrese nuevamente.' ].	mes := UIManager default request:		       'Ingrese el mes de la fecha :' , num asString.	[ mes = '' or: (mes asNumber < 1 or: mes asNumber > 12) ] whileTrue: [		mes := UIManager default request: 'Ingrese nuevamente.' ].	dia := UIManager default request:		       'Ingrese el día de la fecha :' , num asString.	[ dia = '' or: (dia asNumber > 31 or: dia asNumber < 1) ] whileTrue: [		dia := UIManager default request: 'Ingrese nuevamente.' ].	fecha := Date		         year: anio asNumber		         month: mes asNumber		         day: dia asNumber.	^ fecha! !!EmpresaTurismoVisual methodsFor: 'titulos' stamp: 'Anonymous 2/10/2024 16:36'!crearTituloEsquinaSup: texto color: unColor"Método que crea una instancia de StringMorph con un texto dado."|titulo|titulo := StringMorph new.titulo contents: texto;font: (LogicalFont familyName: 'Source Sans Pro' pointSize: (self height / 80));emphasis: TextEmphasis bold emphasisCode;color: unColor;position: (self innerBounds origin).self addMorph: titulo.		! !!EmpresaTurismoVisual methodsFor: 'titulos' stamp: 'Anonymous 2/10/2024 16:33'!crearTituloCentro: texto color: unColor"Método que crea una instancia de StringMorph con un texto dado."|desc |desc := StringMorph new.desc contents: texto;font: (LogicalFont familyName: 'Source Sans Pro' pointSize: (self height /50));emphasis: TextEmphasis bold emphasisCode;color: unColor;center: self topCenter + (0@estandarizador btn2_y*1.5 ).self addMorph: desc.		! !!EmpresaTurismoVisual methodsFor: 'titulos' stamp: 'Anonymous 2/10/2024 16:34'!crearTituloEsquinaInferior: texto color: unColor"Método que crea una instancia de StringMorph con un texto dado."|titulo|titulo := StringMorph new.titulo contents: texto;font: (LogicalFont familyName: 'Source Sans Pro' pointSize: (self height /50));emphasis: TextEmphasis bold emphasisCode;color: unColor;position: (self innerBounds origin) + (xMain - titulo width @ yMain-(titulo height*1.5)  ).self addMorph: titulo.		! !!EmpresaTurismoVisual methodsFor: 'titulos' stamp: 'Anonymous 2/1/2024 20:09'!cartelVEliminado: exito	| cartel bCerrar bReintentar bMenu |	cartel := BorderedMorph new.	cartel borderColor: Color black.	cartel borderWidth: 2.	cartel color: Color yellow.	exito ifTrue: [		cartel addMorph: (TextMorph new				 contents: 'El viaje ingresado fue eliminado';				 color: Color green;				 position: cartel innerBounds origin + (50 @ 10)) ].	exito ifFalse: [		cartel addMorph: (TextMorph new				 contents: 'El viaje ingresado NO fue eliminado';				 color: Color red;				 position: cartel innerBounds origin + (40 @ 10)) ].	bCerrar := BotonAccion new.	bCerrar label: 'Cerrar'.	bCerrar color: Color red.	bCerrar mouseAction: [ cartel delete ].	bReintentar := BotonAccion new.	bReintentar label: 'Reintentar'.	bReintentar color: Color lightBlue.	bReintentar mouseAction: [		cartel delete.		self quitarViaje ].	bMenu := BotonAccion new.	bMenu label: 'Menú principal'.	bMenu color: Color lightBlue.	bMenu mouseAction: [		cartel delete.		self menuPrincipal ].	"Posicionar botones"	cartel addMorph: bCerrar.	bCerrar position: cartel innerBounds origin + (10 @ 40).	cartel addMorph: bMenu.	bMenu position: cartel innerBounds origin + (60 @ 40).	cartel addMorph: bReintentar.	bReintentar position: cartel innerBounds origin + (157 @ 40).	cartel extent: 260 @ 100.	cartel openInWorld! !!EmpresaTurismoVisual methodsFor: 'metodosGenerales' stamp: 'Anonymous 2/12/2024 14:35'!recuperarVar: numero de: coleccion	|aux|	aux := coleccion at: numero.	^aux.! !!EmpresaTurismoVisual methodsFor: 'metodosGenerales' stamp: 'Anonymous 2/9/2024 15:40'!cargarDeleteYCollapse|posicionBase|posicionBase := self innerBounds origin + posicionador esqSupDer - (estandarizador btn2_x *0.5@estandarizador btn2_y*0.2) ."-: Minimiza la pestaña."self 	invocarBoton:  '-'		extent: 			estandarizador btn2		posicion: 		posicionBase - (estandarizador btn2_x@0)  		accion: 			[ self collapse ]		color: Color orange.				"X: Cierra la pestaña."self 	invocarBoton:  'X' 		extent: 			estandarizador btn2   		posicion: 		posicionBase - (estandarizador btn2_x*2@0) 		accion: 			[ self delete . self sorpresa: 'Chau :(' .]		color: Color red.		! !!EmpresaTurismoVisual methodsFor: 'FuncionBotón' stamp: 'Anonymous 1/17/2024 13:47'!invocarBoton:label extent:ext posicion:pos  accion:evt|btn|btn := BotonAccion newWithLabel: label.btn extent: ext.btn position: pos.btn mouseAction: evt.btn color: Color black.self addMorph: btn.! !!EmpresaTurismoVisual methodsFor: 'FuncionBotón' stamp: 'Anonymous 2/10/2024 15:25'!invocarBoton:label extent:ext posicion:pos  accion:evt color: c|btn txt|txt := StringMorph new                contents: label;                color: Color black;                font: (LogicalFont familyName: 'Source Sans Pro' pointSize: ((ext y) /5));					emphasis: TextEmphasis bold emphasisCode.btn := BotonAccion newWithLabel: ''.btn extent: ext.btn position: pos.btn mouseAction: evt.btn fillColor: c.btn addMorph: txt.txt position: btn center - (txt extent // 2).self addMorph: btn.! !!EmpresaTurismoVisual methodsFor: 'FuncionBotón' stamp: 'Anonymous 2/2/2024 18:10'!sorpresa: txt|mensaje|mensaje := GrowlMorph new.mensaje 	contents: txt;			extent: 100@10 ;			position: 100@100;			backgroundColor:  Color gray;			openInWorld .! !!EmpresaTurismoVisual methodsFor: 'FuncionBotón' stamp: 'Anonymous 2/2/2024 16:31'!open    <script: 'self new openInWindow'>.! !!EmpresaTurismoVisual methodsFor: 'FuncionBotón' stamp: 'FacundoFerraris 2/12/2024 22:23'!retornarBoton:label extent:ext posicion:pos  accion:evt color: cB colorLetra: cL|btn txt|txt := StringMorph new                contents: label;                color: cL;                font: (LogicalFont familyName: 'Source Sans Pro' pointSize: ((ext y) /5));					emphasis: TextEmphasis bold emphasisCode.btn := BotonAccion newWithLabel: ''.btn extent: ext.btn position: pos.btn mouseAction: evt.btn fillColor: cB.btn addMorph: txt.txt position: btn center - (txt extent // 2).^btn.! !!EmpresaTurismoVisual methodsFor: 'FuncionBotón' stamp: 'Anonymous 2/13/2024 15:06'!retornarBoton:label extent:ext posicion:pos  accion:evt color: c|btn txt|txt := StringMorph new                contents: label;                color: Color black;                font: (LogicalFont familyName: 'Source Sans Pro' pointSize: ((ext y) /5));					emphasis: TextEmphasis bold emphasisCode.btn := BotonAccion newWithLabel: ''.btn extent: ext.btn position: pos.btn mouseAction: evt.btn fillColor: c.btn addMorph: txt.txt position: btn center - (txt extent // 2).^btn.! !!EmpresaTurismoVisual methodsFor: 'drawing' stamp: 'FacundoFerraris 2/16/2024 15:29'!drawOn: aCanvas|fill rectangle|    rectangle := Rectangle origin: self topLeft  corner: self bottomRight.        fill := GradientFillStyle ramp: {0.0 -> Color cyan . 1.0 -> Color blue}.    fill origin: self topCenter.    fill direction: 0@ (self extent y).    fill radial: false.    aCanvas fillRectangle: (Rectangle origin: self topLeft  corner: self bottomRight) basicFillStyle: fill.! !!EmpresaTurismoVisual methodsFor: 'Clientes' stamp: 'Anonymous 2/16/2024 11:12'!modificarCliente|preferencias apellido residencia opcion dni exito colClientes|colClientes := miEmpresaTurismo getColClientes.(colClientes) ifNotEmpty:[dni := self seleccionarEnListaClientes.opcion := UIManager default    chooseFrom: #('Apellido' 'Preferencias' 'Residencia')    title: 'Seleccione que desea modificar del Cliente:'.(opcion = 1)ifTrue:[	apellido := UIManager default request: 'Ingrese el apellido del cliente:'.	[apellido = '']	whileTrue: [apellido:= UIManager default request: 'Ingrese nuevamente.'.].		exito:= miEmpresaTurismo modificarCliente: dni asNumber apellido: apellido. 	]ifFalse:[	(opcion = 2)	ifTrue:[		preferencias := UIManager default request: 'Ingrese las preferencias de viaje del cliente:'.		[preferencias = '']		whileTrue: [preferencias:= UIManager default request: 'Ingrese nuevamente.'.].		exito := miEmpresaTurismo modificarCliente: dni asNumber  preferencias: preferencias. 		]	ifFalse:[		residencia := UIManager default request: 'Ingrese la residencia del cliente:'.		[residencia = '']		whileTrue: [residencia:= UIManager default request: 'Ingrese nuevamente.'.].		exito := miEmpresaTurismo modificarCliente: dni asNumber  residencia: residencia. 					].	].(exito) ifTrue:[	self menuRespuesta: 'Se ha modificado el dato del cliente, DNI:' ,dni asString , ' con éxito.'		]ifFalse:[	self menuRespuesta: 'Error al modificar el dato del cliente. No existe cliente con ese DNI.'].]ifEmpty:[		self ventanaNotificacion: 'NO HAY CLIENTES PARA MODIFICAR!!' color: Color red.	].	! !!EmpresaTurismoVisual methodsFor: 'Clientes' stamp: 'Anonymous 2/16/2024 11:12'!eliminarCliente|dni exito colClientes|colClientes := miEmpresaTurismo getColClientes.(colClientes) ifNotEmpty:[dni := self seleccionarEnListaClientes.exito := miEmpresaTurismo eliminarCliente: dni asNumber.(exito) ifTrue:[	self menuRespuesta: 'Se ha eliminado al cliente, DNI:' ,dni asString , ' con éxito.'		]ifFalse:[	self menuRespuesta: 'Error al eliminar el cliente. No existe cliente con ese DNI.'].]ifEmpty:[		self ventanaNotificacion: 'NO HAY CLIENTES PARA ELIMINAR!!' color: Color red.	].	! !!EmpresaTurismoVisual methodsFor: 'Clientes' stamp: 'FacundoFerraris 2/16/2024 16:35'!seleccionarEnListaClientes	| colClientes opcion elDni |	colClientes := OrderedCollection new.	elDni := nil.	miEmpresaTurismo getColClientes do: [ :c | colClientes add: c getDni ].	opcion := UIManager default		          chooseFrom: colClientes		          message: 'Seleccione el cliente según su DNI'.	opcion = 0 ifFalse: [		elDni := self recuperarVar: opcion asNumber de: colClientes ].	^ elDni.! !!EmpresaTurismoVisual methodsFor: 'Etapa' stamp: 'Anonymous 2/7/2024 13:32'!cargarFechaEtapa|anio dia mes fecha|"Método que permite ingresar una fecha y la retorna"anio := UIManager default request: 'Escriba el año de la llegada de la etapa:'.	[anio = '']	whileTrue: [anio:= UIManager default request: 'Ingrese nuevamente.'.].		mes := UIManager default request: 'Escriba el mes de la llegada de la etapa:'.	[mes =  '' or: (mes asNumber < 1 or: mes asNumber > 12)]	whileTrue: [mes:= UIManager default request: 'Ingrese nuevamente.'.].		dia := UIManager default request: 'Escriba el dia de la llegada de la etapa:'.	[dia = '' or: (dia asNumber > 31 or: dia asNumber < 1)]	whileTrue:[dia := UIManager default request: 'Ingrese nuevamente.' ]	.	fecha := Date year: anio asNumber  month: mes asNumber  day: dia asNumber.	^fecha.! !Object subclass: #Estandarizador	instanceVariableNames: 'x y dx1 dx2 dy1 dy2'	classVariableNames: ''	package: 'tpFinal-Vista'!!Estandarizador methodsFor: 'initialize' stamp: 'Anonymous 1/22/2024 08:06'!iniciarX: unX Y: unYdx1 :=3.dy1 :=8.dx2 := 10.dy2 :=20.x:=unX.y:=unY.! !!Estandarizador methodsFor: 'initialize' stamp: 'Anonymous 1/22/2024 08:18'!iniciarX: unX Y: unY Dx1: dX1 Dy1: dY1 Dx2: dX2 Dy2: dY2dx1 :=		dX1 .dy1 :=		dY1 .dx2 := 	dX2 .dy2 :=		dY2 .x	:=		unX.y	:=		unY.! !!Estandarizador methodsFor: 'sizes' stamp: 'btnminimizar 1/16/2024 15:55'!btn1^self btn1_x @ self btn1_y .! !!Estandarizador methodsFor: 'sizes' stamp: 'Anonymous 1/22/2024 08:19'!btn1_y^y/dy1 .! !!Estandarizador methodsFor: 'sizes' stamp: 'Anonymous 1/22/2024 08:19'!btn1_x^x/ dx1 .! !!Estandarizador methodsFor: 'sizes' stamp: 'Anonymous 1/22/2024 08:19'!btn2_x^x/dx2 .! !!Estandarizador methodsFor: 'sizes' stamp: 'btnminimizar 1/16/2024 16:18'!btn2^self btn2_x @ self btn2_y .! !!Estandarizador methodsFor: 'sizes' stamp: 'Anonymous 1/22/2024 08:19'!btn2_y^y/dy2 .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Estandarizador class	instanceVariableNames: ''!!Estandarizador class methodsFor: 'constructor' stamp: 'btnminimizar 1/16/2024 15:48'!crearX: unX Y: unY|est|est := self new.est iniciarX: unX Y: unY.^est.  ! !!Estandarizador class methodsFor: 'constructor' stamp: 'Anonymous 1/22/2024 08:20'!crearX: unX Y: unY Dx1: dX1 Dy1: dY1 Dx2: dX2 Dy2: dY2|est|est := self new.est iniciarX: unX Y: unY Dx1: dX1 Dy1: dY1 Dx2: dX2 Dy2: dY2 .^est.! !BorderedMorph subclass: #Formulario	instanceVariableNames: 'numElementos colLabel coleccionFields xMain yMain pos est coleccionRetorno'	classVariableNames: ''	package: 'tpFinal-Vista'!!Formulario methodsFor: 'drawing' stamp: 'Anonymous 2/9/2024 18:14'!drawOn: aCanvas|fill rectangle|    rectangle := Rectangle origin: self topLeft  corner: self bottomRight.        fill := GradientFillStyle ramp: {0.0 -> Color yellow . 1.0 -> Color red}.    fill origin: self topCenter.    fill direction: 0@ (self extent y).    fill radial: false.    aCanvas fillRectangle: (Rectangle origin: self topLeft  corner: self bottomRight) basicFillStyle: fill.! !!Formulario methodsFor: 'metodos' stamp: 'Anonymous 1/31/2024 15:18'!invocarUnBoton: unlabel extent:ext posicion: posicion color: c accion:evt |btn|btn := BotonAccion newWithLabel: unlabel.btn extent: ext.btn position: posicion.btn mouseAction: evt.btn borderColor: Color black.btn fillColor: c.self addMorph: btn.! !!Formulario methodsFor: 'metodos' stamp: 'Anonymous 2/10/2024 14:25'!vaciarCasillascoleccionFields do:[:elemento | elemento setText: ''].! !!Formulario methodsFor: 'initialization' stamp: 'Anonymous 2/10/2024 16:09'!initializeLabels: unaColLabel X: unX Y: unY"construccion inicial"self initialize."seteo principal"numElementos 	:= unaColLabel size .colLabel 			:= unaColLabel .coleccionFields := OrderedCollection new."designar tamaño de la ventana"xMain := unX .yMain := unY ."estandarizar sizes y posiciones"pos 	:=  	Posicionador 	crearX: 	xMain 	Y: 	yMain 	.  est	 	:=  	Estandarizador 	crearX: 	xMain 	Y: 	yMain 	Dx1: 2.75  Dy1: (numElementos*3)+1  Dx2: (numElementos*2)  Dy2:(numElementos*2)   	.self 	construirMorph 	; 	 	cargarBloquesTXT;		openInWorld . 								 ! !!Formulario methodsFor: 'initialization' stamp: 'Anonymous 2/10/2024 15:57'!crearTituloCentro: texto color: unColor"Método que crea una instancia de StringMorph con un texto dado."|desc |desc := StringMorph new.desc contents: texto;font: (LogicalFont familyName: 'Source Sans Pro' pointSize: (self height /50));emphasis: TextEmphasis bold emphasisCode;color: unColor;center: self topCenter + (0@est btn2_y/2).self addMorph: desc.		! !!Formulario methodsFor: 'initialization' stamp: 'Anonymous 2/10/2024 16:16'!initializeLabels: unaColLabel X: unX Y: unY titulo: unTitulo"construccion inicial"self initialize."seteo principal"numElementos 	:= unaColLabel size .colLabel 			:= unaColLabel .coleccionFields := OrderedCollection new."designar tamaño de la ventana"xMain := unX .yMain := unY ."estandarizar sizes y posiciones"pos 	:=  	Posicionador 	crearX: 	xMain 	Y: 	yMain 	.  est	 	:=  	Estandarizador 	crearX: 	xMain 	Y: 	yMain 	Dx1: 2.75  Dy1: (numElementos*3)+1  Dx2:xMain/40  Dy2: xMain/30   	.self 	useGradientFill; 		borderWidth: self height  /5; 		useRoundedCorners ;		setBorderStyle: #complexRaised .self 	construirMorph 	; 	 	cargarBloquesTXT;		crearTituloCentro: unTitulo color: Color black;		openInWorld . 								 ! !!Formulario methodsFor: 'getters' stamp: 'Anonymous 1/31/2024 18:30'!getColeccion|a|a := coleccionFields collect:[:elemento | elemento text].^a .! !!Formulario methodsFor: 'getters' stamp: 'Anonymous 1/31/2024 18:16'!actualizarColeccioncoleccionRetorno := coleccionFields collect:[:elemento | elemento text].! !!Formulario methodsFor: 'getters' stamp: 'Anonymous 2/1/2024 15:57'!getColeccionActiva|a|a := coleccionFields collect:[:elemento | elemento text].^a .! !!Formulario methodsFor: 'private' stamp: 'Anonymous 1/29/2024 17:09'!construirMorph|origen|origen := self innerBounds origin.self 	extent: xMain @ yMain ;		color: 	Color darkGray ;		position: 0@0.! !!Formulario methodsFor: 'private' stamp: 'Anonymous 2/10/2024 16:16'!cargarBloquesTXT|origen posicion|origen := self innerBounds origin.posicion := pos centroSuperior - (est btn1_x @0).self invocarUnBoton: 'X' extent: est btn2 posicion: pos esqSupDer - (est btn2_x @0)   color: (Color red)  accion: [self delete ]. 1 to: numElementos  do:[:i |		self crearTXTconLabel: i posicion: origen + (0@est btn1_y) + posicion + (0@((i-1)*est btn1_y )*3)  extension: est btn1. 	 ]. ! !!Formulario methodsFor: 'private' stamp: 'Anonymous 2/13/2024 15:43'!crearTXTconLabel: unaDireccion posicion: unaPosicion extension: unExtent|txt label |txt 	:= 	SpRubTextFieldMorph 	new.			label := StringMorph new                contents: (colLabel at: unaDireccion);                color: Color black;                font: (LogicalFont familyName: 'Source Sans Pro' pointSize: txt height*3);					emphasis: TextEmphasis bold emphasisCode.			txt 	extent: 		(unExtent x * 2 @ unExtent y);		color: Color black;		backgroundColor: Color black;		setText: '';		position: 	unaPosicion + (0@unExtent y).label 	extent: 		(unExtent x * 2 @ unExtent y);		backgroundColor: (Color blue alpha: 0.5) ;		position: 	unaPosicion .			self 	addMorph: txt;      	addMorph: label.coleccionFields add:txt.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Formulario class	instanceVariableNames: ''!!Formulario class methodsFor: 'constructor' stamp: 'Anonymous 1/31/2024 16:45'!crearFormulario: unaColLabel X: unX Y: unY evento: unEvento|f|f:= self new.f initializeLabels: unaColLabel X: unX Y: unY evento: unEvento.^f.! !!Formulario class methodsFor: 'constructor' stamp: 'Anonymous 2/10/2024 14:37'!crearFormulario: unaColLabel X: unX Y: unY titulo: unTitulo|f|f:= self new.f initializeLabels: unaColLabel X: unX Y: unY titulo: unTitulo 	.^f.! !!Formulario class methodsFor: 'constructor' stamp: 'Anonymous 1/29/2024 16:39'!crearFormulario: unaColLabel X: unX Y: unY|f|f:= self new.f initializeLabels: unaColLabel X: unX Y: unY.^f.! !BorderedMorph subclass: #GradientMorph	instanceVariableNames: 'color1 color2'	classVariableNames: ''	package: 'tpFinal-Vista'!!GradientMorph methodsFor: 'drawing' stamp: 'Anonymous 2/12/2024 16:06'!drawOn: aCanvas|fill rectangle|    rectangle := Rectangle origin: self topLeft  corner: self bottomRight.        fill := GradientFillStyle ramp: {0.0 -> color1 . 1.0 -> color2}.    fill origin: self topCenter  .    fill direction: 0@ (self extent y).    fill radial: false.    aCanvas fillRectangle: (Rectangle origin: self topLeft  corner: self bottomRight) basicFillStyle: fill.! !!GradientMorph methodsFor: 'as yet unclassified' stamp: 'Anonymous 2/12/2024 15:55'!inicializarColor1: unC1 color2: unC2color1 := unC1 .color2 := unC2 .self initialize .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GradientMorph class	instanceVariableNames: ''!!GradientMorph class methodsFor: 'constructor' stamp: 'Anonymous 2/12/2024 16:03'!crearColor1: a color2: b ^self new inicializarColor1:a  color2:b .! !BorderedMorph subclass: #ListaVisual	instanceVariableNames: 'coleccion xMain yMain estandarizador posicionador elementosPorPagina evento mensaje parametros colEtiquetas colInfo instanciaSeleccionada cartelAbierto cartel'	classVariableNames: ''	package: 'tpFinal-Vista'!!ListaVisual methodsFor: 'initialize' stamp: 'FacundoFerraris 2/14/2024 18:27'!iniciarListaVisual: unaColeccion xMain: x yMain: y color: c fraccion: f	colInfo := OrderedCollection new.	colEtiquetas := OrderedCollection new.	xMain := x.	yMain := y.	elementosPorPagina := f.	coleccion := unaColeccion.	cartelAbierto := false.	coleccion ifNotNil: [		coleccion ifNotEmpty: [			instanciaSeleccionada := coleccion at: 1.			instanciaSeleccionada addDependent: self ] .	estandarizador := Estandarizador		                  crearX: xMain		                  Y: yMain		                  Dx1: 1		                  Dy1: f		                  Dx2: 1		                  Dy2: f.	posicionador := Posicionador crearX: x Y: y.	self		initialize;		extent: xMain @ yMain;		position: 0 @ 0;		color: c;		imprimirLista		].! !!ListaVisual methodsFor: 'private' stamp: 'FacundoFerraris 2/14/2024 18:00'!cartelMasInfo	| bCerrar |	cartelAbierto ifTrue: [ cartel delete. ].		cartelAbierto:= true.	cartel := BorderedMorph new.	cartel		useGradientFill;		borderWidth: self height / 2;		useRoundedCorners;		color: (Color fromHexString: '#44e369');		setBorderStyle: #complexRaised.	cartel borderColor: Color black. "Color del borde"	cartel borderWidth: 2. "Ancho del borde"	"Crear un título"	cartel addMorph: (TextMorph new			 contents: instanciaSeleccionada  toString;			 color: Color black;			 position: cartel innerBounds origin + (10 @ 5)).	"Crear el contenido del cartel"	bCerrar := BotonAccion new.	bCerrar label: 'Cerrar'.	bCerrar fillColor: Color red.	bCerrar mouseAction: [ cartel delete. cartelAbierto:= false ].	cartel addMorph: bCerrar.	bCerrar position: cartel innerBounds origin + (880 @ 10).	"Establecer el tamaño del BorderedMorph"	cartel extent: 950 @ 700. "Ajusta las dimensiones según tus necesidades"	cartel openInWorld .! !!ListaVisual methodsFor: 'private' stamp: 'FacundoFerraris 2/14/2024 18:06'!imprimirLista    | i |    i := 0.    "Asegúrate de que 'coleccion' no sea nil antes de intentar iterar sobre ella."    coleccion ifNotEmpty: [        coleccion do: [:item |            | tempMorph txt |				            tempMorph := BotonAccion newWithLabel: ''.            txt := StringMorph new                contents: (item mostrarEtiqueta);					 emphasis: TextEmphasis bold emphasisCode;                color: Color black;                font: (LogicalFont familyName: 'Source Sans Pro' pointSize: tempMorph height / 1.75).				colEtiquetas add: txt.				colInfo add: item mostrarEtiqueta.            tempMorph                extent: estandarizador btn1;                position: posicionador esqSupIzq + (0 @ (i * estandarizador btn1_y));                fillColor: (Color fromHexString: '#02b81d');                addMorph: txt.            txt position: tempMorph center - (txt extent // 2).            "Asigna la acción utilizando un bloque para evitar el problema de sintaxis."            tempMorph mouseAction: [																instanciaSeleccionada := item.															self cartelMasInfo].            "Agrega el botón a la interfaz."            self addMorph: tempMorph.				item addDependent: self.            i := i + 1.        ]    ]! !!ListaVisual methodsFor: 'drawing' stamp: 'Anonymous 2/2/2024 16:41'!drawOn: aCanvas|fill rectangle|    rectangle := Rectangle origin: self topLeft  corner: self bottomRight.        fill := GradientFillStyle ramp: {0.0 -> Color black  . 1.0 ->Color blue}.    fill origin: self topCenter.    fill direction: 0@ (self extent y).    fill radial: false.    aCanvas fillRectangle: (Rectangle origin: self topLeft  corner: self bottomRight) basicFillStyle: fill.! !!ListaVisual methodsFor: 'updating' stamp: 'FacundoFerraris 2/14/2024 18:05'!update: anObject	(cartelAbierto and: instanciaSeleccionada=anObject) ifTrue: [	cartel delete.	self cartelMasInfo.	 ].		! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ListaVisual class	instanceVariableNames: ''!!ListaVisual class methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/21/2024 20:11'!crearListaVisual: unaColeccion xMain: x yMain: y color: c|lV|lV := self new.lV iniciarListaVisual: unaColeccion xMain: x yMain: y color: c.^lV.! !!ListaVisual class methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/22/2024 08:41'!crearListaVisual: unaColeccion xMain: x yMain: y color: c fraccion: f|lV|lV := self new.lV iniciarListaVisual: unaColeccion xMain: x yMain: y color: c fraccion: f.^lV.! !GradientMorph subclass: #MostradorLista	instanceVariableNames: 'coleccionOriginal coleccionRacionada posicionActual elementosPorPagina xMain yMain est btnAnt btnPos coleccionBotones colorBoton colorLetraBoton'	classVariableNames: ''	package: 'tpFinal-Vista'!!MostradorLista methodsFor: 'private' stamp: 'Anonymous 2/16/2024 10:44'!invocarStringMorph: unLabel colorLetra: cL|sM|sM := StringMorph new.sM contents:unLabel;	font:(LogicalFont familyName: 'Source Sans Pro' pointSize: est btn2_y );	emphasis: TextEmphasis bold emphasisCode;	color: cL;	center: self topCenter + (0@est btn2_y). self addMorph: sM.! !!MostradorLista methodsFor: 'private' stamp: 'FacundoFerraris 2/15/2024 20:10'!instalarBotones	self		crearBoton: 'X'		extent: est btn2		position: self innerBounds origin +(self width@0) - (est btn2_x @ 0)		color: (Color fromHexString: '#ad0202')		action: [ self delete ].(coleccionOriginal size > coleccionRacionada size)ifTrue:[	coleccionOriginal ifNotEmpty:[		btnAnt  := self			          crearBoton: '<'			          extent: est btn2			          position: self innerBounds origin +			          (0@self height ) - (0 @ est btn2_y)			          color: Color darkGray			          action: [				          self retroceder .				          posicionActual = 1 ifTrue: [ btnAnt hide ].				          btnPos show.							 self actualizarColeccionRacionada .				          self visualizarColeccion  ].		btnAnt hide.		btnPos := self			          crearBoton: '>'			          extent: est btn2			          position: self innerBounds origin +self extent - est btn2			          color: Color darkGray			          action: [				          self avanzar .				          (posicionActual + elementosPorPagina > coleccionOriginal size) ifTrue: [ btnPos hide ].				          btnAnt show.							 self actualizarColeccionRacionada .				          self visualizarColeccion. ].].].! !!MostradorLista methodsFor: 'private' stamp: 'FacundoFerraris 2/15/2024 16:13'!crearBoton: label extent: e position: p color: c action: a|btn|btn := BotonAccion newWithLabel: label.self addMorph: btn.btn 	extent:e;		position: p;		fillColor: c;		mouseAction: a.^btn.! !!MostradorLista methodsFor: 'constructor' stamp: 'FacundoFerraris 2/15/2024 15:28'!retrocederposicionActual := (posicionActual - elementosPorPagina ) max: (1).! !!MostradorLista methodsFor: 'constructor' stamp: 'Anonymous 2/16/2024 10:31'!visualizarColeccion|botonTemporal i|i:= 1.self eliminarBotones .  coleccionRacionada ifNotEmpty: [ coleccionRacionada do:[ :item |	botonTemporal := BotonMostradorLista crearBML: item dimension: est btn1   posicion: self innerBounds origin  +(0@est btn1_y*i)   colorBoton: colorBoton   colorLetra: colorLetraBoton   letraNegrita: true .	coleccionBotones add: botonTemporal .	self addMorph: botonTemporal .	i := i + 1 .		]].! !!MostradorLista methodsFor: 'constructor' stamp: 'FacundoFerraris 2/15/2024 15:28'!avanzarposicionActual := (posicionActual + elementosPorPagina ) min: (coleccionOriginal size ).! !!MostradorLista methodsFor: 'constructor' stamp: 'FacundoFerraris 2/15/2024 15:51'!actualizarColeccionRacionada|  direccionFinal |coleccionOriginal ifNotEmpty: [ 	direccionFinal := (posicionActual + elementosPorPagina - 1) min: coleccionOriginal  size.	coleccionRacionada := coleccionOriginal		                     copyFrom: posicionActual 		                     to: direccionFinal.		]	 ! !!MostradorLista methodsFor: 'constructor' stamp: 'FacundoFerraris 2/15/2024 16:20'!eliminarBotonescoleccionBotones ifNotNil: [ coleccionBotones ifNotEmpty: [ coleccionBotones do:[:item | item delete.].coleccionBotones removeAll.]].! !!MostradorLista methodsFor: 'constructor' stamp: 'FacundoFerraris 2/15/2024 17:50'!iniciarListaMostrador: unaColeccion xMain: x yMain: y racion: unaRacion titulo: unTitulo colorTitulo: cT colorBoton: cB colorLetraBoton: cLBelementosPorPagina := unaRacion .xMain := x.yMain := y.posicionActual := 1.coleccionOriginal := unaColeccion .coleccionOriginal addDependent: self.coleccionBotones := OrderedCollection new.est := Estandarizador crearX: xMain Y: yMain  Dx1:1   Dy1:unaRacion+2  Dx2:20  Dy2:20 .colorBoton := cB.colorLetraBoton := cLB .self initialize .self useRoundedCorners .self extent: x@y.self actualizarColeccionRacionada  .self visualizarColeccion.self instalarBotones .self invocarStringMorph: unTitulo colorLetra: cT.self openInWorld .! !!MostradorLista methodsFor: 'updating' stamp: 'FacundoFerraris 2/15/2024 16:22'!update: itemself actualizarColeccionRacionada .self visualizarColeccion .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MostradorLista class	instanceVariableNames: ''!!MostradorLista class methodsFor: 'as yet unclassified' stamp: 'FacundoFerraris 2/15/2024 17:36'!crearListaMostrador: unaColeccion xMain: x yMain: y racion: unaRacion color1:c1 color2: c2 titulo: unTitulo colorTitulo: cT colorBoton: cB colorLetraBoton: cLB|mL|mL := self crearColor1: c1 color2: c2.mL  iniciarListaMostrador: unaColeccion xMain: x yMain: y racion: unaRacion titulo: unTitulo colorTitulo: cT colorBoton: cB colorLetraBoton: cLB.^mL.! !Object subclass: #Posicionador	instanceVariableNames: 'x y'	classVariableNames: ''	package: 'tpFinal-Vista'!!Posicionador methodsFor: 'positioning' stamp: 'Anonymous 1/17/2024 19:21'!esqSupIzq^0@0.! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:24'!centroIzquierda^(0)@(y).! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:25'!esqInfDer^(x)@(y).! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:24'!centroSuperior^(x/2)@(0).! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:24'!centroInferior^(x/2)@(y).! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:25'!esqInfIzq^(0)@(y).! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:24'!centroDerecha^(x)@(y).! !!Posicionador methodsFor: 'positioning' stamp: 'Anonymous 1/17/2024 19:21'!centrado^(x/2)@(y/2).! !!Posicionador methodsFor: 'positioning' stamp: 'btnminimizar 1/16/2024 14:25'!esqSupDer^(x)@(0).! !!Posicionador methodsFor: 'initalize' stamp: 'btnminimizar 1/16/2024 14:22'!inicializar: unX y: unYx := unX.y := unY.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Posicionador class	instanceVariableNames: ''!!Posicionador class methodsFor: 'constructor' stamp: 'Anonymous 1/17/2024 19:21'!crearX: x Y: y|pos|pos := self new.pos inicializar:x y: y.^pos. ! !